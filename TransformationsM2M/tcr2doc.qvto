import docptl2doc;

modeltype doc uses "http://srg.aut.uah.es/micobs/doc/doc";
modeltype doctpl uses "http://srg.aut.uah.es/micobs/doctpl/doctpl";
modeltype tcr uses "http://srg.aut.uah.es/micobs/svm/tcr";

transformation generateDoc(in input : tcr, out output : doc);

main() {
	input.objects()![tcr::VTCRTestCampaignReport]->map GenerateDoc();
}
mapping tcr::VTCRTestCampaignReport::GenerateDoc() : doc::DDocument {
	result.name := self.name;
	result.id := self.id;
	result.issue := self.issue;
	result.revision := self.revision;
	result.date := self.date;
	
	result.section += self.map GenerateTestReportSection();
}

mapping tcr::VTCRTestCampaignReport::GenerateTestReportSection() : doc::DDSection {
	result.name := "Traceability Matrices";
	
	result.sectionContent += object DDSection {
		name := "Report Traceability";
		
		sectionContent := object DDBody {
			bodyContent += object DBasicTable {
				style := "TableGridFirstRowShadow";
				width := "100";
				
				rows += object DRow {
					cells += object DCell {
						width := "50";
						bodyContent += object DParagraph {
							paragraphContent += object DRun {
								bold := DRunAttributes::TRUE;
								text := object DText {
									content := "SVS Test Case";
								}
							}
						}
					};
					cells += object DCell {
						width := "10";
						bodyContent += object DParagraph {
							paragraphContent += object DRun {
								bold := DRunAttributes::TRUE;
								text := object DText {
									content := "Pass/Fail";
								}
							}
						}
					};
					cells += object DCell {
						width := "35";
						bodyContent += object DParagraph {
							paragraphContent += object DRun {
								bold := DRunAttributes::TRUE;
								text := object DText {
									content := "Evidence";
								}
							}
						}
					}
				};
				var i : Integer := 1;
				while(i <= self.testReports->size()) {
					rows += object DRow {
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.testReports->at(i).test_procedure;
									}
								}
							}
						};
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.testReports->at(i).status.toString();
									}
								}
							}
						};
						cells += object DCell {
							bodyContent += self.testReports->at(i).evidence.map GenerateParagraph();
						}
					};
					i := i + 1;
				}
			}
		}
	}
}