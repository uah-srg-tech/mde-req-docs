import inverseMatrixTDM;
import docptl2doc;

modeltype doc uses "http://srg.aut.uah.es/micobs/doc/doc";
modeltype doctpl uses "http://srg.aut.uah.es/micobs/doctpl/doctpl";
modeltype srs uses "http://srg.aut.uah.es/micobs/svm/srs";
modeltype tdm uses "http://srg.aut.uah.es/micobs/svm/tdm";

transformation generateDoc(in input : srs, out output : doc);

main() {
	input.objects()![srs::VSRSDocument]->map GenerateDoc();
}

mapping srs::VSRSDocument::GenerateDoc() : doc::DDocument {
	result.name := self.name;
	result.id := self.id;
	result.issue := self.issue;
	result.revision := self.revision;
	result.date := self.date;
	
	result.section += self.introductionSection.map GenerateIntroductionSection();
	result.section += self.applicableDocumentsSection.map GenerateApplicableDocumentsSection();
	result.section += self.referenceDocumentsSection.map GenerateReferenceDocumentsSection();
	result.section += self.termsDefinitionsAbbreviationsSection.map GenerateTDASection();
	result.section += self.softwareOverviewSection.map GenerateSoftwareOverviewSection();
	result.section += self.requirementsSection.map GenerateRequirementsSection();
	result.section += self.logicalModelsSection.map GenerateLogicalModelsSection();
	result.section += self.map GenerateTraceabilityMatricesSection();
	result.section += self.tbcsTbdsSection.map GenerateTbcsTbdsSection();
}

mapping srs::VSRSTBCsTBDs::GenerateTbcsTbdsSection() : doc::DDSection {
	result.name := "Annex: TBCs/TBDs";
	
	if(self.tbcs->isEmpty() = false) {
		result.sectionContent += object DDBody {
			bodyContent += object DParagraph {
				paragraphContent += object DRun {
					bold := DRunAttributes::TRUE;
					text := object DText {
						content := "TBCs";
					}
				}
			}
		};
		result.sectionContent += self.tbcs.map GenerateTBCs();
	};
	if(self.tbds->isEmpty() = false) {
		result.sectionContent += object DDBody {
			bodyContent += object DParagraph {
				paragraphContent += object DRun {
					bold := DRunAttributes::TRUE;
					text := object DText {
						content := "TBDs";
					}
				}
			}
		};
		result.sectionContent += self.tbds.map GenerateTBDs();
	}
}

mapping srs::VSRSIntroduction::GenerateIntroductionSection() : doc::DDSection {
	result.name := "Introduction";
	
	result.sectionContent += self.srsInstatiableSubsections.map GenerateInstatiableSubsection();
}

mapping srs::VSRSApplicableDocuments::GenerateApplicableDocumentsSection() : doc::DDSection {
	result.name := "Applicable Documents";
	
	result.sectionContent := self.applicableDocuments.map GenerateADRDs();
}

mapping srs::VSRSReferenceDocuments::GenerateReferenceDocumentsSection() : doc::DDSection {
	result.name := "Reference Documents";
	
	result.sectionContent := self.referenceDocuments.map GenerateADRDs();
}

mapping srs::VSRSTermsDefinitionsAbbreviations::GenerateTDASection() : doc::DDSection {
	result.name := "Terms, Definitions and Abbreviations";
	
	result.sectionContent := object DDBody {
		var i : Integer := 1;
		while(i <= self.terms->size()) {
			bodyContent += self.terms->at(i).GenerateTDA();
			i := i + 1;
		};
		
		i := 1;
		while(i <= self.definitions->size()) {
			bodyContent += self.definitions->at(i).GenerateTDA();
			i := i + 1;
		};
		
		i := 1;
		while(i <= self.abbreviations->size()) {
			bodyContent += self.abbreviations->at(i).GenerateTDA();
			i := i + 1;
		};
	};
}

helper srs::VSRSAbstractBriefDescription::GenerateTDA() : doctpl::DParagraph {
	return object DParagraph {
		style := "TDA";
		paragraphContent += object DRun {
			text := object DText {
				content := self.name;
			}
		};
		var description := self.description.map GenerateRun();
		description.tab := object DTab {};
		paragraphContent += description;
	};
}
	
mapping srs::VSRSSoftwareOverview::GenerateSoftwareOverviewSection() : doc::DDSection {
	result.name := "Software Overview";
	
	result.sectionContent += self.functionPurpose.map GenerateFixedSection("Function and Purpose");
	result.sectionContent += self.environmentalConsiderations.map GenerateFixedSection("Environmental Considerations");
	result.sectionContent += self.relationOtherSystems.map GenerateFixedSection("Relation with other Systems");
	result.sectionContent += self.constraints.map GenerateFixedSection("Constraints");
}

mapping srs::VSRSFixedSection::GenerateFixedSection(in sectionName : String) : doc::DDSection {
	result.name := sectionName;
	result.sectionContent += self.body.map GenerateBody();
	
	var i : Integer := 1;
	while(i <= self.srsInstatiableSubsections->size()) {
	result.sectionContent += self.srsInstatiableSubsections->at(i).map GenerateInstatiableSubsection();
		i := i + 1;
	};
}

mapping srs::VSRSInstantiableSection::GenerateInstatiableSubsection() : doc::DDSection {
	result.name := self.name;
	result.sectionContent += self.body.map GenerateBody();
	
	var i : Integer := 1;
	while(i <= self.srsInstatiableSubsections->size()) {
	result.sectionContent += self.srsInstatiableSubsections->at(i).map GenerateInstatiableSubsection();
		i := i + 1;
	};
}

mapping srs::VSRSRequirements::GenerateRequirementsSection() : doc::DDSection {
	result.name := "Requirements";
	
	result.sectionContent += self.sectionDescription.map GenerateBody();
	
	result.sectionContent += self.general.GenerateRequirementSubsection("General");
	result.sectionContent += self.performance.GenerateRequirementSubsection("Performance");
	result.sectionContent += self.interface.GenerateRequirementSubsection("Interface");
	result.sectionContent += self.functional.GenerateRequirementSubsection("Functional");
	result.sectionContent += self.operational.GenerateRequirementSubsection("Operational");
	result.sectionContent += self.resources.GenerateRequirementSubsection("Resources");
	result.sectionContent += self.design.GenerateRequirementSubsection("Design");
	result.sectionContent += self.securityPrivacy.GenerateRequirementSubsection("Security and Privacy");
	result.sectionContent += self.portability.GenerateRequirementSubsection("Portability");
	result.sectionContent += self.swQuality.GenerateRequirementSubsection("Software Quality");
	result.sectionContent += self.swReliability.GenerateRequirementSubsection("Software Reliability");
	result.sectionContent += self.swMaintainability.GenerateRequirementSubsection("Software Maintainability");
	result.sectionContent += self.swSafety.GenerateRequirementSubsection("Software Safety");
	result.sectionContent += self.swConfigurationDelivery.GenerateRequirementSubsection("Software Configuration Delivery");
	result.sectionContent += self.dataDefinitionDB.GenerateRequirementSubsection("Data Definition Database");
	result.sectionContent += self.humanFactors.GenerateRequirementSubsection("Human Factors");
	result.sectionContent += self.adaptationInstallation.GenerateRequirementSubsection("Adaptation Installation");
}

helper srs::VSRSAbstractRequirementSection::GenerateRequirementSubsection(in reqSectionName : String) : doc::DDSection {
	return object DDSection {
		name := reqSectionName;
		
		var body := object DDBody {}; 
		var i : Integer := 1;
		while(i <= self.sectionDescription.bodyContent->size()) {
			body.bodyContent += self.sectionDescription.bodyContent->at(i).map GenerateBodyContent();
			i := i + 1;
		};
		i := 1;
		while(i <= self.srsItems->size()) {
			body.bodyContent += self.srsItems->at(i).GenerateReqItem();
			i := i + 1;
		};
		sectionContent := body;
		
		sectionContent += self.srsRequirementSubsections.GenerateReqSubsection();
	};
}

helper srs::VSRSInstantiableRequirementSection::GenerateReqSubsection() : doc::DDSectionContent {
	return object DDSection {
		name := self.name;
		
		var body := object DDBody {}; 
		var i : Integer := 1;
		while(i <= self.sectionDescription.bodyContent->size()) {
			body.bodyContent += self.sectionDescription.bodyContent->at(i).map GenerateBodyContent();
			i := i + 1;
		};
		i := 1;
		while(i <= self.srsItems->size()) {
			body.bodyContent += self.srsItems->at(i).GenerateReqItem();
			i := i + 1;
		};
		sectionContent := body;
	};
}

helper srs::VSRSDocumentItem::GenerateReqItem() : OrderedSet(doctpl::DBodyContent) {
	var bodyContents := object OrderedSet(DBodyContent) {};
	
	bodyContents += self.GenerateReqItemTable();
	var i : Integer := 1;
	while(i <= self.extendedDescription.bodyContent->size()) {
		bodyContents += self.extendedDescription.bodyContent.map GenerateBodyContent();
		i := i + 1;
	};
	return bodyContents;
}

helper srs::VSRSDocumentItem::GenerateReqItemTable() : doctpl::DBodyContent {
	return object DBasicTable {
		style := "TableGridFirstRowColummShadow";
		width := "100";
		rows += object DRow {
			cells += object DCell {
				width := "20";
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := "Name";
						};
					};
				};
			};
			cells += object DCell {
				if(self.mode->size() <> 0) {
					width := "64";
				};
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := self.name;
						};
					};
				};
			};
			if(self.mode->size() <> 0) {
				var modesText : String;
				var i : Integer := 1;
				while(i <= self.mode->size()) {
					var modeText : String;
					switch {
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Off) {
							modeText := "F";
						};
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Boot) {
							modeText := "B";
						};
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Safe) {
							modeText := "S";
						};
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Configuration) {
							modeText := "C";
						};
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Operational) {
							modeText := "O";
						};
					};
					if(modesText.size() = 0) {
						modesText := modeText;
					} else {
						modesText := modesText + (", ") + modeText;
					};
					i := i + 1;
				};
				cells += object DCell {
					width := "16";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							text := object DText {
								content := modesText;
							};
						};
					};
				};
			};
		};
		rows += object DRow {
			cells += object DCell {
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := "Description";
						};
					};
				};
			};
			cells += object DCell {
				if(self.mode->size() <> 0) {
					width := "80";
					colSpan := "2";
				};
				var i : Integer := 1;
				while(i <= self.description.bodyContent->size()) {
					bodyContent += self.description.bodyContent.map GenerateBodyContent();
					i := i + 1;
				};
			};
		};
		rows += object DRow {
			cells += object DCell {
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := "Validation Method";
						};
					};
				};
			};
			cells += object DCell {
				if(self.mode->size() <> 0) {
					width := "80";
					colSpan := "2";
				};
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := self.validationMethod.toString();
						};
					};
				};
			};
		};
		if(self.parentItem->size() <> 0) {
			rows += object DRow {
				cells += object DCell {
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "Parent";
							};
						};
					};
				};
				cells += object DCell {
					if(self.mode->size() <> 0) {
						width := "80";
						colSpan := "2";
					};
					var parentText : String;
					var i : Integer := 1;
					while(i <= self.parentItem->size()) {
						if(parentText.size() = 0) {
							parentText := self.parentItem->at(i).name;
						} else {
							parentText := parentText + (", ") + self.parentItem->at(i).name;
						};
						i := i + 1;
					};
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							text := object DText {
								content := parentText;
							};
						};
					};
				};
			};
		};
	};
}

mapping srs::VSRSLogicalModels::GenerateLogicalModelsSection() : doc::DDSection {
	result.name := "Logical Models";
	
	result.sectionContent += self.logicalModels.GenerateLogicalModel();
}

helper srs::VSRSLogicalModel::GenerateLogicalModel() : doc::DDSectionContent {
	return object DDSection {};
}

mapping srs::VSRSDocument::GenerateTraceabilityMatricesSection() : doc::DDSection {
	result.name := "Traceability Matrices";
	
	result.sectionContent += object DDSection {
		name := "Direct Traceability Matrix";
		sectionContent += self.GenerateDirectTraceabilityMatrix();
	};
	
	result.sectionContent += object DDSection {
		name := "Inverse Traceability Matrix";
		sectionContent += self.GenerateInverseTraceabilityMatrix();
	};
}

helper srs::VSRSDocument::GenerateDirectTraceabilityMatrix() : doc::DDBody {
	return object DDBody {
		bodyContent += object DBasicTable {
			style := "TableGridFirstRowShadow";
			width := "100";
			
			rows += object DRow {
				cells += object DCell {
					width := "37";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SRS Item";
							};
						};
					};
				};
				cells += object DCell {
					width := "26";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SSS document";
							};
						};
					};
				};
				cells += object DCell {
					width := "37";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SSS Item";
							};
						};
					};
				};
			};
			var i : Integer := 1;
			while(i <= self.groups->size()) {
				var j : Integer := 1;
				while(j <= self.groups->at(i).items->size()) {
					rows += object DRow {
						cells += object DCell {
							if(self.groups->at(i).items->at(j).parentItem->size() > 1) {
								rowSpan := self.groups->at(i).items->at(j).parentItem->size().toString();
							};
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).name;
									};
								};
							};
						};
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).parentItem->at(1).group.doc.id;
									};
								};
							};
						};
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).parentItem->at(1).name;
									};
								};
							};
						};
					};
					if(self.groups->at(i).items->at(j).parentItem->size() > 1) {
						var k : Integer := 2;
						while(k <= self.groups->at(i).items->at(j).parentItem->size()) {
							rows += object DRow {
								cells += object DCell {
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := self.groups->at(i).items->at(j).parentItem->at(k).group.doc.id;
											};
										};
									};
								};
								cells += object DCell {
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := self.groups->at(i).items->at(j).parentItem->at(k).name;
											};
										};
									};
								};
							};
							k := k + 1;
						};
					};
					j := j + 1;
				};
				i := i + 1;
			};
		};
	};
}