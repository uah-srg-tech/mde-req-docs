modeltype doc uses "http://srg.aut.uah.es/micobs/doc/doc";
modeltype doctpl uses "http://srg.aut.uah.es/micobs/doctpl/doctpl";
modeltype srs uses "http://srg.aut.uah.es/micobs/svm/srs";
modeltype tdm uses "http://srg.aut.uah.es/micobs/svm/tdm";

transformation generateDoc(in input : srs, out output : doc);

main() {
	input.objects()![srs::VSRSDocument]->map GenerateDoc();
}

mapping srs::VSRSDocument::GenerateDoc() : doc::DDocument {
	result.name := self.name;
	result.id := self.id;
	result.issue := self.issue;
	result.revision := self.revision;
	result.date := self.date;
	
	result.section += self.introductionSection.map GenerateIntroductionSection();
	result.section += self.applicableDocumentsSection.map GenerateApplicableDocumentsSection();
	result.section += self.referenceDocumentsSection.map GenerateReferenceDocumentsSection();
	result.section += self.termsDefinitionsAbbreviationsSection.map GenerateTDASection();
	result.section += self.softwareOverviewSection.map GenerateSoftwareOverviewSection();
	result.section += self.requirementsSection.map GenerateRequirementsSection();
	result.section += self.logicalModelsSection.map GenerateLogicalModelsSection();
	result.section += self.map GenerateTraceabilityMatricesSection();
}

mapping srs::VSRSIntroduction::GenerateIntroductionSection() : doc::DDSection {
	result.name := "Introduction";
	
	result.sectionContent += self.srsInstatiableSubsections.GenerateInstatiableSubsection();
}

mapping srs::VSRSApplicableDocuments::GenerateApplicableDocumentsSection() : doc::DDSection {
	result.name := "Applicable Documents";
	
	result.sectionContent := self.applicableDocuments.GenerateADRDs();
}

mapping srs::VSRSReferenceDocuments::GenerateReferenceDocumentsSection() : doc::DDSection {
	result.name := "Reference Documents";
	
	result.sectionContent := self.referenceDocuments.GenerateADRDs();
}

helper doctpl::DAbstractRelatedDocument::GenerateADRDs() : doc::DDBody {
	return object DDBody {
		bodyContent := object DParagraph {
			style := "ADRD";
			paragraphContent += object DRun {
				text := object DText {
					content := self.name;
				};
			};
			paragraphContent += object DRun {
				tab := object DTab {};
				text := object DText {
					content := self.title + ". " + self.id;
					if(self.issue <> null)
						content := content + " issue " + self.issue.toString();
					if(self.revision <> null)
						content := content + " rev " + self.revision.toString();
					if(self.date <> null)
						content := content + ". " + self.date;
				};
			};
		};
	};	
}

mapping srs::VSRSTermsDefinitionsAbbreviations::GenerateTDASection() : doc::DDSection {
	result.name := "Terms, Definitions and Abbreviations";
	
	result.sectionContent := object DDBody {
		var i : Integer := 1;
		while(i <= self.terms->size()) {
			bodyContent += self.terms->at(i).GenerateTDA();
			i := i + 1;
		};
		
		i := 1;
		while(i <= self.definitions->size()) {
			bodyContent += self.definitions->at(i).GenerateTDA();
			i := i + 1;
		};
		
		i := 1;
		while(i <= self.abbreviations->size()) {
			bodyContent += self.abbreviations->at(i).GenerateTDA();
			i := i + 1;
		};
	};
}

helper srs::VSRSAbstractBriefDescription::GenerateTDA() : doctpl::DParagraph {
	return object DParagraph{
		style := "TDA";
		paragraphContent += object DRun {
			text := object DText {
				content := self.name;
			};
		};
		var description := self.description.GenerateRun();
		description.tab := object DTab {};
		paragraphContent += description;
	};
}
	
mapping srs::VSRSSoftwareOverview::GenerateSoftwareOverviewSection() : doc::DDSection {
	result.name := "Software Overview";
	
	result.sectionContent += self.functionPurpose.GenerateSoftwareOverviewSubsections("Function and Purpose");
	result.sectionContent += self.environmentalConsiderations.GenerateSoftwareOverviewSubsections("Environmental Considerations");
	result.sectionContent += self.relationOtherSystems.GenerateSoftwareOverviewSubsections("Relation with other Systems");
	result.sectionContent += self.constraints.GenerateSoftwareOverviewSubsections("Constraints");
}

helper srs::VSRSFixedSection::GenerateSoftwareOverviewSubsections(in sectionName : String) : doc::DDSection {
	return object DDSection {
		name := sectionName;
		sectionContent += self.body.GenerateDBody();
		
		var i : Integer := 1;
		while(i <= self.srsInstatiableSubsections->size()) {
		sectionContent += self.srsInstatiableSubsections->at(i).GenerateInstatiableSubsection();
			i := i + 1;
		};
	};
}

mapping srs::VSRSRequirements::GenerateRequirementsSection() : doc::DDSection {
	result.name := "Requirements";
	
	result.sectionContent += self.sectionDescription.GenerateDBody();
	
	result.sectionContent += self.general.GenerateRequirementSubsection("General");
	result.sectionContent += self.performance.GenerateRequirementSubsection("Performance");
	result.sectionContent += self.interface.GenerateRequirementSubsection("Interface");
	result.sectionContent += self.functional.GenerateRequirementSubsection("Functional");
	result.sectionContent += self.operational.GenerateRequirementSubsection("Operational");
	result.sectionContent += self.resources.GenerateRequirementSubsection("Resources");
	result.sectionContent += self.design.GenerateRequirementSubsection("Design");
	result.sectionContent += self.securityPrivacy.GenerateRequirementSubsection("Security and Privacy");
	result.sectionContent += self.portability.GenerateRequirementSubsection("Portability");
	result.sectionContent += self.swQuality.GenerateRequirementSubsection("Software Quality");
	result.sectionContent += self.swReliability.GenerateRequirementSubsection("Software Reliability");
	result.sectionContent += self.swMaintainability.GenerateRequirementSubsection("Software Maintainability");
	result.sectionContent += self.swSafety.GenerateRequirementSubsection("Software Safety");
	result.sectionContent += self.swConfigurationDelivery.GenerateRequirementSubsection("Software Configuration Delivery");
	result.sectionContent += self.dataDefinitionDB.GenerateRequirementSubsection("Data Definition Database");
	result.sectionContent += self.humanFactors.GenerateRequirementSubsection("Human Factors");
	result.sectionContent += self.adaptationInstallation.GenerateRequirementSubsection("Adaptation Installation");
}

helper srs::VSRSAbstractRequirementSection::GenerateRequirementSubsection(in reqSectionName : String) : doc::DDSection {
	return object DDSection {
		name := reqSectionName;
		
		var body := object DDBody {}; 
		var i : Integer := 1;
		while(i <= self.sectionDescription.bodyContent->size()) {
			body.bodyContent += self.sectionDescription.bodyContent->at(i).map GenerateBodyContent();
			i := i + 1;
		};
		i := 1;
		while(i <= self.srsItems->size()) {
			body.bodyContent += self.srsItems->at(i).GenerateReqItem();
			i := i + 1;
		};
		sectionContent := body;
		
		sectionContent += self.srsRequirementSubsections.GenerateReqSubsection();
	};
}

helper srs::VSRSInstantiableRequirementSection::GenerateReqSubsection() : doc::DDSectionContent {
	return object DDSection {
		name := self.name;
		
		var body := object DDBody {}; 
		var i : Integer := 1;
		while(i <= self.sectionDescription.bodyContent->size()) {
			body.bodyContent += self.sectionDescription.bodyContent->at(i).map GenerateBodyContent();
			i := i + 1;
		};
		i := 1;
		while(i <= self.srsItems->size()) {
			body.bodyContent += self.srsItems->at(i).GenerateReqItem();
			i := i + 1;
		};
		sectionContent := body;
	};
}

helper srs::VSRSDocumentItem::GenerateReqItem() : OrderedSet(doctpl::DBodyContent) {
	var bodyContents := object OrderedSet(DBodyContent) {};
	
	bodyContents += self.GenerateReqItemTable();
	var i : Integer := 1;
	while(i <= self.extendedDescription.bodyContent->size()) {
		bodyContents += self.extendedDescription.bodyContent.map GenerateBodyContent();
		i := i + 1;
	};
	return bodyContents;
}

helper srs::VSRSDocumentItem::GenerateReqItemTable() : doctpl::DBodyContent {
	return object DBasicTable {
		style := "TableGridFirstRowColummShadow";
		width := "100";
		rows += object DRow {
			cells += object DCell {
				width := "20";
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := "Name";
						};
					};
				};
			};
			cells += object DCell {
				if(self.mode->size() <> 0) {
					width := "64";
				};
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := self.name;
						};
					};
				};
			};
			if(self.mode->size() <> 0) {
				var modesText : String;
				var i : Integer := 1;
				while(i <= self.mode->size()) {
					var modeText : String;
					switch {
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Off) {
							modeText := "F";
						};
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Boot) {
							modeText := "B";
						};
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Safe) {
							modeText := "S";
						};
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Configuration) {
							modeText := "C";
						};
						case(self.mode->at(i) = srs::VSRSDocumentItemModes::Operational) {
							modeText := "O";
						};
					};
					if(modesText.size() = 0) {
						modesText := modeText;
					} else {
						modesText := modesText + (", ") + modeText;
					};
					i := i + 1;
				};
				cells += object DCell {
					width := "16";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							text := object DText {
								content := modesText;
							};
						};
					};
				};
			};
		};
		rows += object DRow {
			cells += object DCell {
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := "Description";
						};
					};
				};
			};
			cells += object DCell {
				if(self.mode->size() <> 0) {
					width := "80";
					colSpan := "2";
				};
				var i : Integer := 1;
				while(i <= self.description.bodyContent->size()) {
					bodyContent += self.description.bodyContent.map GenerateBodyContent();
					i := i + 1;
				};
			};
		};
		rows += object DRow {
			cells += object DCell {
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := "Validation Method";
						};
					};
				};
			};
			cells += object DCell {
				if(self.mode->size() <> 0) {
					width := "80";
					colSpan := "2";
				};
				bodyContent += object DParagraph {
					paragraphContent += object DRun {
						bold := DRunAttributes::TRUE;
						text := object DText {
							content := self.validationMethod.toString();
						};
					};
				};
			};
		};
		if(self.parentItem->size() <> 0) {
			rows += object DRow {
				cells += object DCell {
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "Parent";
							};
						};
					};
				};
				cells += object DCell {
					if(self.mode->size() <> 0) {
						width := "80";
						colSpan := "2";
					};
					var parentText : String;
					var i : Integer := 1;
					while(i <= self.parentItem->size()) {
						if(parentText.size() = 0) {
							parentText := self.parentItem->at(i).name;
						} else {
							parentText := parentText + (", ") + self.parentItem->at(i).name;
						};
						i := i + 1;
					};
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							text := object DText {
								content := parentText;
							};
						};
					};
				};
			};
		};
	};
}

mapping srs::VSRSLogicalModels::GenerateLogicalModelsSection() : doc::DDSection {
	result.name := "Logical Models";
	
	result.sectionContent += self.logicalModels.GenerateLogicalModel();
}

helper srs::VSRSLogicalModel::GenerateLogicalModel() : doc::DDSectionContent {
	return object DDSection {};
}

helper srs::VSRSInstantiableSection::GenerateInstatiableSubsection() : doc::DDSection {
	return object DDSection {
		name := self.name;
		sectionContent += self.body.GenerateDBody();
		
		var i : Integer := 1;
		while(i <= self.srsInstatiableSubsections->size()) {
		sectionContent += self.srsInstatiableSubsections->at(i).GenerateInstatiableSubsection();
			i := i + 1;
		};
	};
}

helper doctpl::DBody::GenerateDBody() : doc::DDBody {
	return object DDBody {
		var i : Integer := 1;
		while(i <= self.bodyContent->size()) {
			bodyContent += self.bodyContent.map GenerateBodyContent();
			i := i + 1;
		};
	};
}

mapping doctpl::DBodyContent::GenerateBodyContent() : doctpl::DBodyContent {
	init {
		if(self.metaClassName() = "DParagraph") {
			result := self.oclAsType(DParagraph).GenerateParagraph();
		}
		else if(self.metaClassName() = "DFigureFromFile") {
			result := self.oclAsType(DFigureFromFile).GenerateFigureFromFile();
		}
		else if(self.metaClassName() = "DTableFromFile") {
			result := self.oclAsType(DTableFromFile).GenerateTableFromFile();
		}
		else if(self.metaClassName() = "DBasicTable") {
			result := self.oclAsType(DBasicTable).GenerateBasicTable();
		}
		else if(self.metaClassName() = "DEnumerate") {
			result := self.oclAsType(DEnumerate).GenerateEnumerate();
		}
		else if(self.metaClassName() = "DItemize") {
			result := self.oclAsType(DItemize).GenerateItemize();
		};
	}
	if(self.style <> null) {
		result.style := self.style;
	};
	if(self.alignment <> doctpl::DAlignment::left) {
		result.alignment := self.alignment;
	};
}

helper doctpl::DParagraph::GenerateParagraph() : doctpl::DParagraph {
	return object DParagraph {
		
		var i : Integer := 1;
		while(i <= self.paragraphContent->size()) {
			if(self.paragraphContent->at(i).metaClassName() = "DRun") {
				paragraphContent += self.paragraphContent->at(i).oclAsType(DRun).GenerateRun();
			}
			else if(self.paragraphContent->at(i).metaClassName() = "DHyperlink") {
				paragraphContent += self.paragraphContent->at(i).oclAsType(DHyperlink).GenerateHyperlink();
			};
			i := i + 1;
		};
	};
}

helper doctpl::DRun::GenerateRun() : doctpl::DRun {
	return object DRun {
		bold := self.bold;
		italics := self.italics;
		underline := self.underline;
		if(self.tab <> null) {
			tab := object DTab {};
		};
		text := object DText {
			content := self.text.content.substring(7, self.text.content.size()-7);
		};
	};
}

helper doctpl::DHyperlink::GenerateHyperlink() : doctpl::DHyperlink {
	return object DHyperlink {
		reference := self.reference;
		if(self.run = null) {
			run := object DRun {
				text := object DText {
					content := self.reference.name;
				};
			};
		} else {
			run := self.run.GenerateRun();
		};
	};
}

helper doctpl::DFigureFromFile::GenerateFigureFromFile() : doctpl::DFigureFromFile {
	return object DFigureFromFile {
		name := self.name;
		referenceFile := self.referenceFile;
		width := self.width;
		height := self.height;
		caption := self.caption;
	};
}

helper doctpl::DTableFromFile::GenerateTableFromFile() : doctpl::DTableFromFile {
	return object DTableFromFile {
		name := self.name;
		referenceFile := self.referenceFile;
		width := self.width;
		height := self.height;
		caption := self.caption;
	};
}

helper doctpl::DBasicTable::GenerateBasicTable() : doctpl::DBasicTable { 
	return object DBasicTable {
		name := self.name;
		width := self.width;
		caption := self.caption;
		rows += self.rows.GenerateRows();
	};
}

helper doctpl::DRow::GenerateRows() : doctpl::DRow {
	return object DRow {
		cells += self.cells.GenerateCells();
	};
}

helper doctpl::DCell::GenerateCells() : doctpl::DCell {
	return object DCell {
		if(self.colSpan <> null)
			colSpan := self.colSpan;
		if(self.rowSpan <> null)
			rowSpan := self.rowSpan;
		if(self.width <> null)
			width := self.width;
		if(self.shadow <> null)
			shadow := self.shadow;
		
		var i : Integer := 1;
		while(i <= self.bodyContent->size()) {
			bodyContent += self.bodyContent.map GenerateBodyContent();
			i := i + 1;
		};
	};
}

helper doctpl::DListContent::GenerateEnumerate() : doctpl::DListContent {
	return object DEnumerate {
		if(self.style <> null) {
			style := self.style;
		};
		if(self.alignment <> doctpl::DAlignment::left) {
			alignment := self.alignment;
		};
		items += self.items.GenerateItems();
	};
}

helper doctpl::DListContent::GenerateItemize() : doctpl::DListContent {
	return object DItemize {
		if(self.style <> null) {
			style := self.style;
		};
		if(self.alignment <> doctpl::DAlignment::left) {
			alignment := self.alignment;
		};
		items += self.items.GenerateItems();
	};
}

helper doctpl::DListItem::GenerateItems() : doctpl::DListItem {
	return object DListItem {
		paragraph := self.paragraph.GenerateParagraph();
		if(self.sublist.style <> null) {
			sublist.style := self.sublist.style;
		};
		if(self.sublist.alignment <> doctpl::DAlignment::left) {
			sublist.alignment := self.sublist.alignment;
		};
		sublist.items := self.sublist.items.GenerateItems();
	};
}

mapping srs::VSRSDocument::GenerateTraceabilityMatricesSection() : doc::DDSection {
	result.name := "Traceability Matrices";
	
	result.sectionContent += object DDSection {
		name := "Direct Traceability Matrix";
		sectionContent += self.GenerateDirectTraceabilityMatrix();
	};
	
	result.sectionContent += object DDSection {
		name := "Inverse Traceability Matrix";
		sectionContent += self.GenerateInverseTraceabilityMatrix();
	};
}

helper srs::VSRSDocument::GenerateDirectTraceabilityMatrix() : doc::DDBody {
	return object DDBody {
		bodyContent += object DBasicTable {
			style := "TableGridFirstRowShadow";
			width := "100";
			
			rows += object DRow {
				cells += object DCell {
					width := "37";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SRS Item";
							};
						};
					};
				};
				cells += object DCell {
					width := "26";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SSS document";
							};
						};
					};
				};
				cells += object DCell {
					width := "37";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SSS Item";
							};
						};
					};
				};
			};
			var i : Integer := 1;
			while(i <= self.groups->size()) {
				var j : Integer := 1;
				while(j <= self.groups->at(i).items->size()) {
					rows += object DRow {
						cells += object DCell {
							if(self.groups->at(i).items->at(j).parentItem->size() > 1) {
								rowSpan := self.groups->at(i).items->at(j).parentItem->size().toString();
							};
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).name;
									};
								};
							};
						};
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).parentItem->at(1).group.doc.id;
									};
								};
							};
						};
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).parentItem->at(1).name;
									};
								};
							};
						};
					};
					if(self.groups->at(i).items->at(j).parentItem->size() > 1) {
						var k : Integer := 2;
						while(k <= self.groups->at(i).items->at(j).parentItem->size()) {
							rows += object DRow {
								cells += object DCell {
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := self.groups->at(i).items->at(j).parentItem->at(k).group.doc.id;
											};
										};
									};
								};
								cells += object DCell {
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := self.groups->at(i).items->at(j).parentItem->at(k).name;
											};
										};
									};
								};
							};
							k := k + 1;
						};
					};
					j := j + 1;
				};
				i := i + 1;
			};
		};
	};
}

helper srs::VSRSDocument::GenerateInverseTraceabilityMatrix() : doc::DDBody {
	return object DDBody {
		bodyContent += object DBasicTable {
			style := "TableGridFirstRowShadow";
			width := "100";
			
			rows += object DRow {
				cells += object DCell {
					width := "37";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SSS Item";
							};
						};
					};
				};
				cells += object DCell {
					width := "26";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SSS document";
							};
						};
					};
				};
				cells += object DCell {
					width := "37";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SRS Item";
							};
						};
					};
				};
			};
			var i : Integer := 1;
			while(i <= self.parents->size()) {
				var j : Integer := 1;
				while(j <= self.parents->at(i).document.groups->size()) {
					var k : Integer := 1;
					while(k <= self.parents->at(i).document.groups->at(j).items->size()) {
						var itemName : String := self.parents->at(i).document.groups->at(j).items->at(k).name;
						
						//first check if item is applicable for items which reference current item
						var isNotApplicable : Boolean := false; 
						var x : Integer := 1;
						while(x <= self.parents->at(i).notApplicableItem->size()) {
							if(self.parents->at(i).notApplicableItem->at(x).name = itemName) {
								isNotApplicable := true;
								break;
							};
							x := x + 1;
						};
						if(isNotApplicable = false) {
							//then look for items which reference current item
							var itemRefNum : Integer := 0;
							var itemRefNames : OrderedSet(String);
							
							x := 1;
							while(x <= self.groups->size()) {
								var y : Integer := 1;
								while(y <= self.groups->at(x).items->size()) {
									var z : Integer := 1;
									while(z <= self.groups->at(x).items->at(y).parentItem->size()) {
										if(self.groups->at(x).items->at(y).parentItem->at(z).name = itemName) {
											itemRefNum := itemRefNum + 1;
											itemRefNames += self.groups->at(x).items->at(y).name;
										};
										z := z + 1;
									};
									y := y + 1;
								};
								x := x + 1;
							};
							
							//then write all ref items found in table
							rows += object DRow {
								cells += object DCell {
									if(itemRefNum > 1) {
										rowSpan := itemRefNum.toString();
									};
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := itemName;
											};
										};
									};
								};
								cells += object DCell {
									if(itemRefNum > 1) {
										rowSpan := itemRefNum.toString();
									};
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := self.parents->at(i).document.id;
											};
										};
									};
								};
								cells += object DCell {
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											if(itemRefNum = 0) {
												bold := DRunAttributes::TRUE;
												italics := DRunAttributes::TRUE;
												underline := DRunAttributes::TRUE;
												color := "FF0000";
											};
											text := object DText {
												if(itemRefNum = 0) {
													content := "Not Found";
												} else {
													content := itemRefNames->at(1);
												};
											};
										};
									};
								};
							};
							if(itemRefNum > 1) {
								x := 2;
								while(x <= itemRefNum) {
									rows += object DRow {
										cells += object DCell {
											bodyContent += object DParagraph {
												paragraphContent += object DRun {
													text := object DText {
														content := itemRefNames->at(x);
													};
												};
											};
										};
									};
									x := x + 1;
								};
							};
						};
						k := k + 1;
					};
					j := j + 1;
				};
				i := i + 1;
			};
		};
	};
}