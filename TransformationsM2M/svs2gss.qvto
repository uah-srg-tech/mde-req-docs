modeltype svs uses "http://srg.aut.uah.es/micobs/svm/svs";modeltype test_campaign uses "http://srg.aut.uah.es/gss/test_campaign";modeltype test_proc uses "http://srg.aut.uah.es/gss/test_proc";modeltype common uses "http://srg.aut.uah.es/gss/common";	transformation generateGSSProcedure(in input : svs, out output : test_campaign);main() {	input.objects()![svs::VSVSDocument]->map GenerateGSSTestCampaign();}mapping svs::VSVSDocument::GenerateGSSTestCampaign() : test_campaign::GSSTestCampaignTestCampaign {		result.name := self.id;	result.test_proc += self.testProceduresSection.testProcedures.map GenerateGSSProcedure();}mapping svs::VSVSTestProcedure::GenerateGSSProcedure() : test_proc::GSSTestProcTestProc {		result.name := self.name;	result.scenarioId := self.scenario.id;	result.step += self.procedureSteps.step.map GenerateGSSTestProcStep();	var i : Integer := 1;	while (i <= self.procedureSteps.step->size()) {		if not self.procedureSteps.step->at(i).prev_step_idref->isEmpty() then {			var j : Integer := 1;			while (j <= self.procedureSteps.step->size()) {				if self.procedureSteps.step->at(i).prev_step_idref.name = self.procedureSteps.step->at(j).name then {					result.step->at(i).prev_step_idref := result.step->at(j);										var outputFound = false;					var k : Integer := 1;										while (k <= self.procedureSteps.step->at(j).outputs.output->size()) {						if self.procedureSteps.step->at(i).output_idref_from_prev_step = self.procedureSteps.step->at(j).outputs.output->at(k) then {							result.step->at(i).output_idref_from_prev_step := result.step->at(j).outputs.output->at(k);							outputFound := true;							break;						}endif;						k := k + 1;					};										break;				}endif;				j := j + 1;			};		}endif;		i := i + 1;	};}mapping svs::VSVSProcedureStep::GenerateGSSTestProcStep() : test_proc::GSSTestProcStep {	result.name := self.name;	result.description := self.description;	result.id := self.id;	if (self.mode = svs::VSVSStepMode::continuous) {		result.mode := test_proc::GSSTestProcMode::continuous;	}	else if (self.mode = svs::VSVSStepMode::manual) {		result.mode := test_proc::GSSTestProcMode::manual;	}	else if (self.mode = svs::VSVSStepMode::concurrent) {		result.mode := test_proc::GSSTestProcMode::concurrent;	}endif;	result.replays := self.replays;		result.inputs := self.inputs.map GenerateInputs();	if not self.outputs->isEmpty() then {		result.outputs := self.outputs.map GenerateOutputs();	}endif;		if not self.specialPackets->isEmpty() then {		result.specialPackets := self.specialPackets.map GenerateSpecialPackets();	}endif;}mapping svs::VSVSProcedureStep::GeneratePrevStepIdRef() : test_proc::GSSTestProcStep {	result.name := self.name;	result.description := self.description;	result.id := self.id;}mapping svs::VSVSStepInputs::GenerateInputs() : test_proc::GSSTestProcInputs {	var i : Integer := 1;	while (i <= self.input->size()) {			result.input += self.input->at(i).map GenerateInput();		i := i + 1;	};}mapping svs::VSVSStepOutputs::GenerateOutputs() : test_proc::GSSTestProcOutputs {	if(self.checkmode = svs::VSVSStepCheckmode::all) {		result.checkmode := test_proc::GSSTestProcCheckmode::all;	}	else if(self.checkmode = svs::VSVSStepCheckmode::allunsorted) {		result.checkmode := test_proc::GSSTestProcCheckmode::allunsorted;	}	else if(self.checkmode = svs::VSVSStepCheckmode::any) {		result.checkmode := test_proc::GSSTestProcCheckmode::any;	}endif;	result.valid_time_interval_value := self.valid_time_interval_value;	result.valid_time_interval_unit := self.valid_time_interval_unit.GenerateDelayUnit();		var i : Integer := 1;	while (i <= self.output->size()) {			result.output += self.output->at(i).map GenerateOutput();		i := i + 1;	};}mapping svs::VSVSStepSpecialPackets::GenerateSpecialPackets() : test_proc::GSSTestProcSpecialPackets {	result.enable += self.enable.map GenerateSpecialPacketsEnDis();	result.disable += self.disable.map GenerateSpecialPacketsEnDis();	result.enable_print += self.enable_print.map GenerateSpecialPacketsEnDis();	result.disable_print += self.disable_print.map GenerateSpecialPacketsEnDis();}mapping svs::VSVSStepFilter::GenerateFilter() : test_proc::GSSTestProcFilter {	if(self.apply_def_filter = svs::VSVSStepYesNo::yes) {		result.apply_def_filter := test_proc::GSSTestProcYesNo::yes;	}	else if(self.apply_def_filter = svs::VSVSStepYesNo::no) {		result.apply_def_filter := test_proc::GSSTestProcYesNo::no;	}endif;	result.extra_filter := self.extra_filter;}mapping svs::VSVSStepInput::GenerateInput() : test_proc::GSSTestProcInput {	init {		if(self.metaClassName() = "VSVSStepInputLevel3") {			result := self.oclAsType(VSVSStepInputLevel3).map GenerateInputLevel3();		}		else if(self.metaClassName() = "VSVSStepInputLevel2") {			result := self.oclAsType(VSVSStepInputLevel2).map GenerateInputLevel2();		}		else if(self.metaClassName() = "VSVSStepInputLevel1") {			result := self.oclAsType(VSVSStepInputLevel1).map GenerateInputLevel1();		}		else if(self.metaClassName() = "VSVSStepInputLevel0") {			result := self.oclAsType(VSVSStepInputLevel0).map GenerateInputLevel0();		};	}}mapping svs::VSVSStepInputLevel3::GenerateInputLevel3() : test_proc::GSSTestProcInputLevel3 {	result.name := self.name;	result.ifRef := self.ifRef;	result.delay_value := self.delay_value;	result.delay_unit := self.delay_unit.GenerateDelayUnit();	result.level3 := self.level3;	result.app_to_level3 := self.app_to_level3;	result.level2 := self.level2;	result.level3_to_level2 := self.level3_to_level2;	result.level1 := self.level1;	result.level2_to_level1 := self.level2_to_level1;	result.level0 := self.level0;	result.level1_to_level0 := self.level1_to_level0;}mapping svs::VSVSStepInputLevel2::GenerateInputLevel2() : test_proc::GSSTestProcInputLevel2 {	result.name := self.name;	result.ifRef := self.ifRef;	result.delay_value := self.delay_value;	result.delay_unit := self.delay_unit.GenerateDelayUnit();	result.level2 := self.level2;	result.app_to_level2 := self.app_to_level2;	result.level1 := self.level1;	result.level2_to_level1 := self.level2_to_level1;	result.level0 := self.level0;	result.level1_to_level0 := self.level1_to_level0;}mapping svs::VSVSStepInputLevel1::GenerateInputLevel1() : test_proc::GSSTestProcInputLevel1 {	result.name := self.name;	result.ifRef := self.ifRef;	result.delay_value := self.delay_value;	result.delay_unit := self.delay_unit.GenerateDelayUnit();	result.level1 := self.level1;	result.app_to_level1 := self.app_to_level1;	result.level0 := self.level0;	result.level1_to_level0 := self.level1_to_level0;}mapping svs::VSVSStepInputLevel0::GenerateInputLevel0() : test_proc::GSSTestProcInputLevel0 {	result.name := self.name;	result.ifRef := self.ifRef;	result.delay_value := self.delay_value;	result.delay_unit := self.delay_unit.GenerateDelayUnit();	result.level0 := self.level0;	result.app_to_level0 := self.app_to_level0;}helper svs::VSVSStepUnit::GenerateDelayUnit() : test_proc::GSSTestProcUnit {	var unitValue := test_proc::GSSTestProcUnit::miliseconds;	if(self = svs::VSVSStepUnit::seconds) {		unitValue := test_proc::GSSTestProcUnit::seconds;	}endif;	return unitValue;}mapping svs::VSVSStepOutput::GenerateOutput() : test_proc::GSSTestProcOutput {	init {		if(self.metaClassName() = "VSVSStepOutputLevel3") {			result := self.oclAsType(VSVSStepOutputLevel3).map GenerateOutputLevel3();		}		else if(self.metaClassName() = "VSVSStepOutputLevel2") {			result := self.oclAsType(VSVSStepOutputLevel2).map GenerateOutputLevel2();		}		else if(self.metaClassName() = "VSVSStepOutputLevel1") {			result := self.oclAsType(VSVSStepOutputLevel1).map GenerateOutputLevel1();		}		else if(self.metaClassName() = "VSVSStepOutputLevel0") {			result := self.oclAsType(VSVSStepOutputLevel0).map GenerateOutputLevel0();		};	}}mapping svs::VSVSStepOutputLevel3::GenerateOutputLevel3() : test_proc::GSSTestProcOutputLevel3 {	result.name := self.name;	result.id := self.id;	result.ifRef := self.ifRef;	result.optional := self.optional;	result.level3 := self.level3;	result.level3_filter := self.level3_filter.map GenerateFilter();	result.level2 := self.level2;	result.level3_from_level2 := self.level3_from_level2; 	result.level2_filter := self.level2_filter.map GenerateFilter();	result.level1 := self.level1;	result.level2_from_level1 := self.level2_from_level1; 	result.level1_filter := self.level1_filter.map GenerateFilter();	result.level0 := self.level0;	result.level0_filter := self.level0_filter.map GenerateFilter();}mapping svs::VSVSStepOutputLevel2::GenerateOutputLevel2() : test_proc::GSSTestProcOutputLevel2 {	result.name := self.name;	result.id := self.id;	result.ifRef := self.ifRef;	result.optional := self.optional;	result.level2 := self.level2;	result.level2_filter := self.level2_filter.map GenerateFilter();	result.level1 := self.level1;	result.level2_from_level1 := self.level2_from_level1; 	result.level1_filter := self.level1_filter.map GenerateFilter();	result.level0 := self.level0;	result.level1_from_level0 := self.level1_from_level0; 	result.level0_filter := self.level0_filter.map GenerateFilter();}mapping svs::VSVSStepOutputLevel1::GenerateOutputLevel1() : test_proc::GSSTestProcOutputLevel1 {	result.name := self.name;	result.id := self.id;	result.ifRef := self.ifRef;	result.optional := self.optional;	result.level1 := self.level1;	result.level1_filter := self.level1_filter.map GenerateFilter();	result.level0 := self.level0;	result.level1_from_level0 := self.level1_from_level0; 	result.level0_filter := self.level0_filter.map GenerateFilter();}mapping svs::VSVSStepOutputLevel0::GenerateOutputLevel0() : test_proc::GSSTestProcOutputLevel0 {	result.name := self.name;	result.id := self.id;	result.ifRef := self.ifRef;	result.optional := self.optional;	result.level0 := self.level0;	result.level0_filter := self.level0_filter.map GenerateFilter();}mapping svs::VSVSStepEnableDisable::GenerateSpecialPacketsEnDis() : test_proc::GSSTestProcEnableDisable {	result.id := self.id; }