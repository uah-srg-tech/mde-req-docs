modeltype svs uses "http://srg.aut.uah.es/micobs/svm/svs";modeltype testsetup uses "http://srg.aut.uah.es/micobs/svm/testsetup";modeltype test_campaign uses "http://srg.aut.uah.es/gss/test_campaign";modeltype test_proc uses "http://srg.aut.uah.es/gss/test_proc";modeltype common uses "http://srg.aut.uah.es/gss/common";modeltype gssTcInput uses "http://srg.aut.uah.es/gss/tcinput";modeltype gssTcHeaderInput uses "http://srg.aut.uah.es/gss/tcheaderinput";modeltype gssExport uses "http://srg.aut.uah.es/gss/export";modeltype gssTmOutput uses "http://srg.aut.uah.es/gss/tmoutput";modeltype gssTmHeaderOutput uses "http://srg.aut.uah.es/gss/tmheaderoutput";modeltype gssImport uses "http://srg.aut.uah.es/gss/import";modeltype gssFilter uses "http://srg.aut.uah.es/gss/filter";modeltype fieldvalue uses "http://srg.aut.uah.es/tmtcif/fieldvalue";modeltype gssFormat uses "http://srg.aut.uah.es/gss/format";transformation generateGSSProcedure(in input : svs, out output : test_campaign);main() {	input.objects()![svs::VSVSDocument]->map GenerateGSSTestCampaign();}mapping svs::VSVSDocument::GenerateGSSTestCampaign() : test_campaign::GSSTestCampaignTestCampaign {		result.name := self.id;	result.test_proc += self.testProceduresSection.testProcedures.map GenerateGSSProcedure();}mapping svs::VSVSTestProcedure::GenerateGSSProcedure() : test_proc::GSSTestProcTestProc {		result.name := self.name;	result.scenario := self.scenario.name;	var i : Integer := 1;	var prevConf : VSVSStepConfigurations := null;	while (i <= self.procedureSteps.step->size()) {		result.step += self.procedureSteps.step->at(i).map GenerateGSSTestProcStep(i-1, prevConf);		prevConf := self.procedureSteps.step->at(i).configurations;		i := i + 1;	};		//get previous step and output	i := 1;	while (i <= self.procedureSteps.step->size()) {		if(self.procedureSteps.step->at(i).prev_step != null) {			var j : Integer := 1;			while (j <= self.procedureSteps.step->size()) {				if(self.procedureSteps.step->at(i).prev_step.name = self.procedureSteps.step->at(j).name) {					result.step->at(i).prev_step_idref := result.step->at(j);										var outputFound = false;					var k : Integer := 1;					while (k <= self.procedureSteps.step->at(j).outputs.oclAsType(VSVSStepTelemetrySet).telemetry->size()) {						if(self.procedureSteps.step->at(i).prev_tm_from_prev_step =								self.procedureSteps.step->at(j).outputs.oclAsType(VSVSStepTelemetrySet).telemetry->at(k)) {							result.step->at(i).output_idref_from_prev_step := result.step->at(j).outputs.output->at(k);							outputFound := true;							break;						};						k := k + 1;					};					break;				};				j := j + 1;			}		};		i := i + 1;	}}mapping svs::VSVSProcedureStep::GenerateGSSTestProcStep(in stepId : Integer, in prevConf : VSVSStepConfigurations) : test_proc::GSSTestProcStep {	result.name := self.name;	result.id := stepId.toString();	result.replays := self.replays;		result.inputs := self.inputs.GenerateInputs();	if(result.inputs.metaClassName() = "GSSTestProcInputs") {		result.mode := test_proc::GSSTestProcMode::continuous;	} else if(result.inputs.metaClassName() = "GSSTestProcAction") {		result.mode := test_proc::GSSTestProcMode::action;	};		if(self.outputs != null) {		result.outputs := self.outputs.GenerateOutputs();	};		if (self.configurations = null) {		result.specialPackets := self.configurations.GenerateSpecialPackets(prevConf);	}}helper svs::VSVSStepInputs::GenerateInputs() : test_proc::GSSTestProcAbstractInputs {	var inputs : GSSTestProcAbstractInputs;		if(self.metaClassName() = "VSVSStepTelecommandSequence") {		var tcSeq := self.oclAsType(VSVSStepTelecommandSequence);				inputs := object GSSTestProcInputs {};		var i : Integer := 1;		while (i <= tcSeq.telecommand->size()) {			inputs.oclAsType(GSSTestProcInputs).input += tcSeq.telecommand->at(i).GenerateTC();//don't remove oclAsType			i := i + 1;		}	} else if(self.metaClassName() = "VSVSStepAction") {		var svsAction := self.oclAsType(VSVSStepAction);				inputs := object GSSTestProcAction {			message := svsAction.selectedAction.name;			if(svsAction.selectedAction.type != VTestSetupActionType::instruction) {				actionType := GSSTestProcActionType::instruction;			} else if(svsAction.selectedAction.type != VTestSetupActionType::checking) {				actionType := GSSTestProcActionType::checking;			};			if(svsAction.delay_value != null) {				delay_value := svsAction.delay_value;				delay_unit := svsAction.delay_unit.GenerateTimeUnit();			};			if(svsAction.span_value != null) {				span_value := svsAction.span_value;				span_unit := svsAction.span_unit.GenerateTimeUnit();			}		};	};	return inputs;}helper svs::VSVSStepTelecommand::GenerateTC() : test_proc::GSSTestProcInput {	var gssTPInput : GSSTestProcInput;		var app_export : GSSExportExport := null;	//todo: check if tcTempate is reusable	if((self.tcData.tcTemplate.fields->size() != 0) or (self.tcData.fields->size() != 0)){		app_export := object GSSExportExport {			name := self.name + "_app_export";			uri := "es.uah.aut.srg." + name;			version := "v1";			settings := object GSSExportSettings {				var i : Integer := 1;				var arrayIdx : Integer := 0; 				while (i <= self.tcData.tcTemplate.fields->size()) {					var tcField := self.tcData.tcTemplate.fields->at(i);					var fieldRef := tcField.fieldRef.oclAsType(GSSTCInputField).gssField;					if(tcField.value.metaClassName() = "TMTCIFFieldValueFile") {						if(tcField.fieldRef.oclAsType(GSSTCInputField).gssField.metaClassName() = "GSSFormatAIField") {							settingAIFromFile += object GSSExportSettingAIFromFile {								toFieldRef := tcField.fieldRef.oclAsType(GSSTCInputField).gssField.oclAsType(GSSFormatAIField);								file := tcField.value.oclAsType(TMTCIFFieldValueFile).filename;								toArrayIndex := arrayIdx.toString();								arrayIdx := arrayIdx + 1;							}						} else {							settingFromFile += object GSSExportSettingFromFile {								toFieldRef := tcField.fieldRef.oclAsType(GSSTCInputField).gssField;								file := tcField.value.oclAsType(TMTCIFFieldValueFile).filename;							}						}					} else {						var theValue : String := null;						if(tcField.value.metaClassName() = "TMTCIFFieldValueRaw") {							theValue := tcField.value.oclAsType(TMTCIFFieldValueRaw).value;						} else if(tcField.value.metaClassName() = "TMTCIFFieldValueEnum") {							theValue := tcField.value.oclAsType(TMTCIFFieldValueEnum).valueRef.raw;						};						if(tcField.fieldRef.oclAsType(GSSTCInputField).gssField.metaClassName() = "GSSFormatAIField") {							settingAIFromConst += object GSSExportSettingAIFromConst {								toFieldRef := tcField.fieldRef.oclAsType(GSSTCInputField).gssField.oclAsType(GSSFormatAIField);								value := theValue;								toArrayIndex := arrayIdx.toString();								arrayIdx := arrayIdx + 1;							}						} else {							settingFromConst += object GSSExportSettingFromConst {								toFieldRef := tcField.fieldRef.oclAsType(GSSTCInputField).gssField;								value := theValue;							}						}					};					i := i + 1;				};				i := 1;				while (i <= self.tcData.fields->size()) {					var tcField := self.tcData.fields->at(i);					if(tcField.value.metaClassName() = "TMTCIFFieldValueFile") {						settingFromFile += object GSSExportSettingFromFile {							toFieldRef := tcField.fieldRef.oclAsType(GSSTCInputField).gssField;							file := tcField.value.oclAsType(TMTCIFFieldValueFile).filename;						}											} else {						var theValue : String := null;						if(tcField.value.metaClassName() = "TMTCIFFieldValueRaw") {							theValue := tcField.value.oclAsType(TMTCIFFieldValueRaw).value;						} else if(tcField.value.metaClassName() = "TMTCIFFieldValueEnum") {							theValue := tcField.value.oclAsType(TMTCIFFieldValueEnum).valueRef.raw;						};						settingFromConst += object GSSExportSettingFromConst {							toFieldRef := tcField.fieldRef.oclAsType(GSSTCInputField).gssField;							value := theValue;						}					};					i := i + 1;				}			}		}	};		var tcInput := self.tcData.tcTemplate.tcInput.oclAsType(GSSTCInput);		var hdr_export_default : GSSExportExport := null;	if(tcInput.levels = "\"1\"") {		hdr_export_default := tcInput.to_level0_export;	} else if(tcInput.levels = "\"2\"") {		hdr_export_default := tcInput.to_level1_export;	} else if(tcInput.levels = "\"3\"") {		hdr_export_default := tcInput.to_level2_export;	} else if(tcInput.levels = "\"4\"") {		hdr_export_default := tcInput.to_level3_export;	};		var hdr_export : GSSExportExport := null;	if(self.tcHeader.fields->size() != 0) {		hdr_export := object GSSExportExport {			name := self.name + "_hdr_export";			uri := "es.uah.aut.srg." + name;			version := "v1";			settings := object GSSExportSettings {				var i : Integer := 1;				while (i <= self.tcHeader.fields->size()) {					var tcHeaderField := self.tcHeader.fields->at(i);					if(tcHeaderField.value.metaClassName() = "TMTCIFFieldValueFile") {						settingFromFile += object GSSExportSettingFromFile {							toFieldRef := tcHeaderField.fieldRef.oclAsType(GSSTCHeaderInputField).gssHeaderField;							file := tcHeaderField.value.oclAsType(TMTCIFFieldValueFile).filename;						}					} else {						var theValue : String := null;						if(tcHeaderField.value.metaClassName() = "TMTCIFFieldValueRaw") {							theValue := tcHeaderField.value.oclAsType(TMTCIFFieldValueRaw).value;						} else if(tcHeaderField.value.metaClassName() = "TMTCIFFieldValueEnum") {							theValue := tcHeaderField.value.oclAsType(TMTCIFFieldValueEnum).valueRef.raw;						};						settingFromConst += object GSSExportSettingFromConst {							toFieldRef := tcHeaderField.fieldRef.oclAsType(GSSTCHeaderInputField).gssHeaderField;							value := theValue;						}					};					i := i + 1;				};				//add exports from original export file				i := 1;				while (i <= hdr_export_default.settings.settingFromConst->size()) {					var tcHeaderField := hdr_export_default.settings.settingFromConst->at(i);					var j : Integer := 1;					var already_exported : Boolean := false;					//check if already exported previously					while (j <= self.tcHeader.fields->size()) {						if(tcHeaderField.toFieldRef = self.tcHeader.fields->at(j).fieldRef.oclAsType(GSSTCHeaderInputField).gssHeaderField) {							already_exported := true;							break;						};						j := j + 1;					};					if(already_exported = false) {						settingFromConst += object GSSExportSettingFromConst {							toFieldRef := tcHeaderField.toFieldRef;							value := tcHeaderField.value;						}					};					i := i + 1;				}			}		}	};		if(tcInput.levels = "\"1\"") {		gssTPInput := object GSSTestProcInputLevel0 {			if(hdr_export != null) {				app_to_level0 := hdr_export;			} else {				app_to_level0 := tcInput.to_level0_export;			};			level0 := tcInput.level0_format;		}	} else if(tcInput.levels = "\"2\"") {		gssTPInput := object GSSTestProcInputLevel1 {			if(app_export != null) {				app_export.to := tcInput.level1_format;				app_to_level1 := app_export;			};			level1 := tcInput.level1_format;			if(hdr_export != null) {				level1_to_level0 := hdr_export;			} else {				level1_to_level0 := tcInput.to_level0_export;			};			level0 := tcInput.level0_format;		}	} else if(tcInput.levels = "\"3\"") {		gssTPInput := object GSSTestProcInputLevel2 {			if(app_export != null) {				app_export.to := tcInput.level2_format;				app_to_level2 := app_export;			};			level2 := tcInput.level2_format;			if(hdr_export != null) {				level2_to_level1 := hdr_export;			} else {				level2_to_level1 := tcInput.to_level1_export;			};			level1 := tcInput.level1_format;			level1_to_level0 := tcInput.to_level0_export;			level0 := tcInput.level0_format;		}	} else if(tcInput.levels = "\"4\"") {		gssTPInput := object GSSTestProcInputLevel3 {			if(app_export != null) {				app_export.to := tcInput.level3_format;				app_to_level3 := app_export;			};			level3 := tcInput.level3_format;			if(hdr_export != null) {				level3_to_level2 := hdr_export;			} else {				level3_to_level2 := tcInput.to_level2_export;			};			level2 := tcInput.level2_format;			level2_to_level1 := tcInput.to_level1_export;			level1 := tcInput.level1_format;			level1_to_level0 := tcInput.to_level0_export;			level0 := tcInput.level0_format;		}	};	gssTPInput.name := self.name;	gssTPInput.ifRef := self.interface.id;	if(self.delay_value != null) {		gssTPInput.delay_value := self.delay_value;		gssTPInput.delay_unit := self.delay_unit.GenerateTimeUnit();	};	return gssTPInput;}helper svs::VSVSTimeUnit::GenerateTimeUnit() : test_proc::GSSTestProcTimeUnit {	var unitValue := test_proc::GSSTestProcTimeUnit::miliseconds;	if(self = svs::VSVSTimeUnit::seconds) {		unitValue := test_proc::GSSTestProcTimeUnit::seconds;	};	return unitValue;}helper svs::VSVSStepOutputs::GenerateOutputs() : test_proc::GSSTestProcOutputs {	var outputs : GSSTestProcOutputs := null;	if(self.metaClassName() = "VSVSStepTelemetrySet") {		var tmSet := self.oclAsType(VSVSStepTelemetrySet);				outputs := object GSSTestProcOutputs {			if(tmSet.checkmode = svs::VSVSStepTelemetrySetCheckmode::all) {				checkmode := test_proc::GSSTestProcCheckmode::all;			}			else if(tmSet.checkmode = svs::VSVSStepTelemetrySetCheckmode::allunsorted) {				checkmode := test_proc::GSSTestProcCheckmode::allunsorted;			}			else if(tmSet.checkmode = svs::VSVSStepTelemetrySetCheckmode::any) {				checkmode := test_proc::GSSTestProcCheckmode::any;			};			valid_time_interval_value := tmSet.valid_time_interval_value;			valid_time_interval_unit := tmSet.valid_time_interval_unit.GenerateTimeUnit();		};		var i : Integer := 1;		while (i <= tmSet.telemetry->size()) {			outputs.output += tmSet.telemetry->at(i).GenerateTM(i-1);			i := i + 1;		}	};	return outputs;}helper svs::VSVSStepTelemetry::GenerateTM(in tmId : Integer) : test_proc::GSSTestProcOutput {	var gssTPOutput : GSSTestProcOutput;		var top_level_filter := object GSSTestProcFilter {		apply_def_filter := GSSTestProcYesNo::no;		if((self.tmData.tmTemplate.tmOutput.pi1 != null) or				(self.tmData.tmTemplate.fields->size() != 0) or				(self.tmData.fields->size() != 0)) {			var pi1_found := 0;			extra_filter := object GSSFilterMintermFilter {				name := self.name + "_app_filter";				uri := "es.uah.aut.srg." + name;				version := "v1";				if(self.tmData.tmTemplate.tmOutput.pi1 != null) {					pi1_found := 1;					BoolVar += object GSSFilterBoolVar {						id := "0";						name := self.tmData.tmTemplate.tmOutput.pi1.name + "_" + self.tmData.tmTemplate.tmOutput.pi1.val;						constantType := GSSFilterConstantType::decimal;						FieldRef :=  self.tmData.tmTemplate.tmOutput.pi1.oclAsType(GSSTMOutputPi1).gssField;						Op := object GSSFilterFieldOp {							type := GSSFilterOPType::equal;						};						Value := object GSSFilterConstant {							value := self.tmData.tmTemplate.tmOutput.pi1.val;						}					}				};				var i : Integer := 1;				while (i <= self.tmData.tmTemplate.fields->size()) {					var tmField := self.tmData.tmTemplate.fields->at(i);					BoolVar += object GSSFilterBoolVar {						id := (i + pi1_found - 1).toString();						name := tmField.fieldRef.name + "_" + tmField.value.oclAsType(TMTCIFFieldValueRaw).value;						constantType := GSSFilterConstantType::decimal;						FieldRef :=  tmField.fieldRef.oclAsType(GSSTMOutputField).gssField;						Op := object GSSFilterFieldOp {							type := GSSFilterOPType::equal;						};						if(tmField.value.metaClassName() = "TMTCIFFieldValueRaw") {							Value := object GSSFilterConstant {								value := tmField.value.oclAsType(TMTCIFFieldValueRaw).value;							}						} else if(tmField.value.metaClassName() = "TMTCIFFieldValueEnum") {							Value := object GSSFilterConstant {								value := tmField.value.oclAsType(TMTCIFFieldValueEnum).valueRef.raw;							}						} else if(tmField.value.metaClassName() = "TMTCIFFieldValueFile") {							Value := object GSSFilterSelect {								fromFile := tmField.value.oclAsType(TMTCIFFieldValueFile).filename;							}						}					};					i := i + 1;				};				i := 1;				while(i <= self.tmData.fields->size()) {					var tmField := self.tmData.fields->at(i);					BoolVar += object GSSFilterBoolVar {						id := (i + pi1_found - 1 + self.tmData.tmTemplate.fields->size()).toString();						name := tmField.fieldRef.name + "_" + tmField.value.oclAsType(TMTCIFFieldValueRaw).value;						constantType := GSSFilterConstantType::decimal;						FieldRef :=  tmField.fieldRef.oclAsType(GSSTMOutputField).gssField;						Op := object GSSFilterFieldOp {							type := GSSFilterOPType::equal;						};						if(self.tmData.fields->at(i).value.metaClassName() = "TMTCIFFieldValueRaw") {							Value := object GSSFilterConstant {								value := self.tmData.fields->at(i).value.oclAsType(TMTCIFFieldValueRaw).value;							}						} else if(self.tmData.fields->at(i).value.metaClassName() = "TMTCIFFieldValueEnum") {							Value := object GSSFilterConstant {								value := self.tmData.fields->at(i).value.oclAsType(TMTCIFFieldValueEnum).valueRef.raw;							}						} else if(self.tmData.fields->at(i).value.metaClassName() = "TMTCIFFieldValueFile") {							Value := object GSSFilterSelect {								fromFile := self.tmData.fields->at(i).value.oclAsType(TMTCIFFieldValueFile).filename;							}						}					};					i := i + 1;				};				i := 0;				Minterm := object GSSFilterMinterm {					id := "0";					BoolVar->forEach(bV) {						BoolVarRef += object GSSFilterBoolVarRef {							idRef := i.toString();						};						i := i + 1;					}				}			}		}	};	var gssOutput := self.tmData.tmTemplate.tmOutput.oclAsType(GSSTMOutput);	var bottom_level_filter : GSSTestProcFilter;		if(gssOutput.levels = "\"1\"") {		top_level_filter.apply_def_filter := GSSTestProcYesNo::yes;		top_level_filter.extra_filter := gssOutput.level0_filter;	} else {		bottom_level_filter := object GSSTestProcFilter {			apply_def_filter := GSSTestProcYesNo::yes;			if(self.tmHeader = null) {				if(gssOutput.levels = "\"2\"") {					extra_filter := gssOutput.level0_filter;				} else if(gssOutput.levels = "\"3\"") {					extra_filter := gssOutput.level1_filter;				} else if(gssOutput.levels = "\"4\"") {					extra_filter := gssOutput.level2_filter;				}			}			else if(self.tmHeader.fields->size() != 0) {				extra_filter := object GSSFilterMintermFilter {					name := self.name + "_hdr_filter";					uri := "es.uah.aut.srg." + name;					version := "v1";					var i : Integer := 1;					while(i <= self.tmHeader.fields->size()) {						var tmHeaderField := self.tmHeader.fields->at(i);						BoolVar += object GSSFilterBoolVar {							id := (i - 1).toString();							name := tmHeaderField.fieldRef.name + "_" + tmHeaderField.value.oclAsType(TMTCIFFieldValueRaw).value;							constantType := GSSFilterConstantType::decimal;							FieldRef := tmHeaderField.fieldRef.oclAsType(GSSTMHeaderOutputField).gssHeaderField;							Op := object GSSFilterFieldOp {								type := GSSFilterOPType::equal;							};							if(tmHeaderField.value.metaClassName() = "TMTCIFFieldValueRaw") {								Value := object GSSFilterConstant {									value := tmHeaderField.value.oclAsType(TMTCIFFieldValueRaw).value;								}							} else if(tmHeaderField.value.metaClassName() = "TMTCIFFieldValueEnum") {								Value := object GSSFilterConstant {									value := tmHeaderField.value.oclAsType(TMTCIFFieldValueEnum).valueRef.raw;								}							} else if(tmHeaderField.value.metaClassName() = "TMTCIFFieldValueFile") {								Value := object GSSFilterSelect {									fromFile := tmHeaderField.value.oclAsType(TMTCIFFieldValueFile).filename;								}							}						};						i := i + 1;					};					i := 0;					Minterm := object GSSFilterMinterm {						id := "0";						BoolVar->forEach(bV) {							BoolVarRef += object GSSFilterBoolVarRef {								idRef := i.toString();							};							i := i + 1;						}					}				}			}		}	};	if(gssOutput.levels = "\"1\"") {		gssTPOutput := object GSSTestProcOutputLevel0 {			if(top_level_filter.extra_filter != null) {				top_level_filter.extra_filter.formatFile := gssOutput.level0_format;			};			level0 := gssOutput.level0_format;			level0_filter := top_level_filter;		}	} else if(gssOutput.levels = "\"2\"") {		gssTPOutput := object GSSTestProcOutputLevel1 {			if(top_level_filter.extra_filter != null) {				top_level_filter.extra_filter.formatFile := gssOutput.level1_format;			};			level1_filter := top_level_filter;			level1 := gssOutput.level1_format;			level1_from_level0 := gssOutput.from_level0_import;			level0 := gssOutput.level0_format;			level0_filter := bottom_level_filter;		}	} else if(gssOutput.levels = "\"3\"") {		gssTPOutput := object GSSTestProcOutputLevel2 {			if(top_level_filter.extra_filter != null) {				top_level_filter.extra_filter.formatFile := gssOutput.level2_format;			};			level2_filter := top_level_filter;			level2 := gssOutput.level2_format;			level2_from_level1 := gssOutput.from_level1_import;			level1 := gssOutput.level1_format;			level1_filter := bottom_level_filter;			level1_from_level0 := gssOutput.from_level0_import;			level0 := gssOutput.level0_format;		}	} else if(gssOutput.levels = "\"4\"") {		gssTPOutput := object GSSTestProcOutputLevel3 {			if(top_level_filter.extra_filter != null) {				top_level_filter.extra_filter.formatFile := gssOutput.level3_format;			};			level3_filter := top_level_filter;			level3 := gssOutput.level3_format;			level3_from_level2 := gssOutput.from_level2_import;			level2 := gssOutput.level2_format;			level2_filter := bottom_level_filter;			level2_from_level1 := gssOutput.from_level1_import;			level1 := gssOutput.level1_format;			level1_from_level0 := gssOutput.from_level0_import;			level0 := gssOutput.level0_format;		}	};	gssTPOutput.name := self.name;	gssTPOutput.ifRef := self.interface.id;	gssTPOutput.id := tmId.toString();	return gssTPOutput;}helper svs::VSVSStepConfigurations::GenerateSpecialPackets(in prevConf : VSVSStepConfigurations) : test_proc::GSSTestProcSpecialPackets {	var specials : test_proc::GSSTestProcSpecialPackets;	var i : Integer := 1;	while (i <= self._configuration->size()) {		if(self._configuration->at(i).filterStatus != null) {			var addSpecial : Boolean := false;			if(prevConf = null) {				addSpecial := true;			} else {				//look for previous step				var j : Integer := 1;				while (j <= prevConf._configuration->size()) {					if((prevConf._configuration->at(j)._configuration = self._configuration->at(i)._configuration) and							(prevConf._configuration->at(j).filterStatus != null)) {						//if prevConf found for this conf it must be not default, so current value must be the same						break;					};					j := j + 1;				};				if(j > prevConf._configuration->size()) {					//no prevConf found for this conf					addSpecial := true;				}			};			if(addSpecial = true) {				if(self._configuration->at(i).filterStatus = VTestSetupConfigurationStatus::on) {					specials.enable += self._configuration->at(i).map GenerateSpecialPacket();				} else {					specials.disable += self._configuration->at(i).map GenerateSpecialPacket();				}			}		};		if(self._configuration->at(i).printStatus != null) {			var addSpecialPrint : Boolean := false;			if(prevConf = null) {				addSpecialPrint := true;			} else {				//look for previous step				var j : Integer := 1;				while (j <= prevConf._configuration->size()) {					if((prevConf._configuration->at(j)._configuration = self._configuration->at(i)._configuration) and							(prevConf._configuration->at(j).printStatus != null)) {						//if prevConf found for this conf it must be not default, so current value must be the same						break;					};					j := j + 1;				};				if(j > prevConf._configuration->size()) {					//no prevConf found for this conf					addSpecialPrint := true;				}			};			if(addSpecialPrint = true) {				if(self._configuration->at(i).printStatus = VTestSetupConfigurationStatus::on) {					specials.enable_print += self._configuration->at(i).map GenerateSpecialPacket();				} else {					specials.disable_print += self._configuration->at(i).map GenerateSpecialPacket();				}			}		};		i := i + 1;	};	return specials;};mapping svs::VSVSStepConfiguration::GenerateSpecialPacket() : test_proc::GSSTestProcEnableDisable {	result.id := self._configuration.id; }