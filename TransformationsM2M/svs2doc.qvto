import inverseMatrixVDM;
import docptl2doc;

modeltype doc uses "http://srg.aut.uah.es/micobs/doc/doc";
modeltype doctpl uses "http://srg.aut.uah.es/micobs/doctpl/doctpl";
modeltype svs uses "http://srg.aut.uah.es/micobs/svm/svs";
modeltype vdm uses "http://srg.aut.uah.es/micobs/svm/vdm";

transformation generateDoc(in input : svs, out output : doc);

main() {
	input.objects()![svs::VSVSDocument]->map GenerateDoc();
}

mapping svs::VSVSDocument::GenerateDoc() : doc::DDocument {
	result.name := self.name;
	result.id := self.id;
	result.issue := self.issue;
	result.revision := self.revision;
	result.date := self.date;
	
	result.section += self.introductionSection.map GenerateIntroductionSection();
	result.section += self.applicableDocumentsSection.map GenerateApplicableDocumentsSection();
	result.section += self.referenceDocumentsSection.map GenerateReferenceDocumentsSection();
	result.section += self.termsDefinitionsAbbreviationsSection.map GenerateTDASection();
	result.section += self.softwareOverviewSection.map GenerateFixedSection("Software Overview");
	result.section += self.taskIdentificationSection.map GenerateTaskIdentificationSection();
	result.section += self.testingSpecificationDesignSection.map GenerateTestingSpecificationDesignSection();
	result.section += self.testCasesSection.map GenerateTestCasesSection();
	result.section += self.testProceduresSection.map GenerateTestProceduresSection();
	result.section += self.analysisInspectionReviewSection.map GenerateFixedSection("Analysis, Inspection and Review");
	result.section += self.testPlatformRequirementsSection.map GenerateFixedSection("Test Platform Requirements");
	result.section += self.map GenerateAdditionalInformationSection();
}

mapping svs::VSVSIntroduction::GenerateIntroductionSection() : doc::DDSection {
	result.name := "Introduction";
	
	result.sectionContent += self.svsInstatiableSubsections.map GenerateInstatiableSubsection();
}

mapping svs::VSVSApplicableDocuments::GenerateApplicableDocumentsSection() : doc::DDSection {
	result.name := "Applicable Documents";
	
	result.sectionContent := self.applicableDocuments.map GenerateADRDs();
}

mapping svs::VSVSReferenceDocuments::GenerateReferenceDocumentsSection() : doc::DDSection {
	result.name := "Reference Documents";
	
	result.sectionContent := self.referenceDocuments.map GenerateADRDs();
}

mapping svs::VSVSTermsDefinitionsAbbreviations::GenerateTDASection() : doc::DDSection {
	result.name := "Terms, Definitions and Abbreviations";
	
	result.sectionContent := object DDBody {
		var i : Integer := 1;
		while(i <= self.terms->size()) {
			bodyContent += self.terms->at(i).GenerateTDA();
			i := i + 1;
		};
		
		i := 1;
		while(i <= self.definitions->size()) {
			bodyContent += self.definitions->at(i).GenerateTDA();
			i := i + 1;
		};
		
		i := 1;
		while(i <= self.abbreviations->size()) {
			bodyContent += self.abbreviations->at(i).GenerateTDA();
			i := i + 1;
		};
	};
}

helper svs::VSVSAbstractBriefDescription::GenerateTDA() : doctpl::DParagraph {
	return object DParagraph{
		style := "TDA";
		paragraphContent += object DRun {
			text := object DText {
				content := self.name;
			};
		};
		var description := self.description.map GenerateRun();
		description.tab := object DTab {};
		paragraphContent += description;
	};
}

mapping svs::VSVSTaskIdentification::GenerateTaskIdentificationSection() : doc::DDSection {
	result.name := "Task Identification";
	result.sectionContent += self.taskCriteria.map GenerateFixedSection("Task Criteria");
	result.sectionContent += self.featuresToBeTested.map GenerateFixedSection("Features to be Tested");
	result.sectionContent += self.featuresNotToBeTested.map GenerateFixedSection("Features not to be Tested");
	result.sectionContent += self.testPassFailCriteria.map GenerateFixedSection("Test Pass Fail Criteria");
	result.sectionContent += self.itemsCanNotBeValidated.map GenerateFixedSection("Items that can not be Validated");
	result.sectionContent += self.manuallyAutoGeneratedCode.map GenerateFixedSection("Manually Automatic Generated Code");
}

mapping svs::VSVSTestingSpecificationDesign::GenerateTestingSpecificationDesignSection() : doc::DDSection {
	result.name := "Testing Specification Design";
	result.sectionContent += self.general.map GenerateFixedSection("General");
	result.sectionContent += self.scenarios.map GenerateScenariosSection();
	result.sectionContent += self.testDesigns.map GenerateTestDesign();
}

mapping svs::VSVSScenariosSection::GenerateScenariosSection() : doc::DDSection {
	result.name := "Scenarios";
	result.sectionContent += self.scenarios.map GenerateScenarioSection();
}
	
mapping svs::VSVSScenarioSection::GenerateScenarioSection() : doc::DDSection {
	result.name := self.name;
	result.sectionContent += self.body.map GenerateBody();
}

mapping svs::VSVSTestDesign::GenerateTestDesign() : doc::DDSection {
	result.name := self.name;
	result.sectionContent += self.general.map GenerateFixedSection("General");
	result.sectionContent += self.featuresToBeTested.map GenerateFixedSection("Features to be Tested");
	result.sectionContent += self.approachRefinements.map GenerateFixedSection("Approach Refinements");
}

mapping svs::VSVSTestCases::GenerateTestCasesSection() : doc::DDSection {
	result.name := "Test Cases";
	result.sectionContent += self.general.map GenerateFixedSection("General");
	result.sectionContent += self.testCases.map GenerateTestCase();
}

mapping svs::VSVSTestCase::GenerateTestCase() : doc::DDSection {
	result.name := self.name;
	result.sectionContent := object DDBody {
		bodyContent += self.identifier.GenerateTestInfo("Identifier");
		bodyContent += self.inputs.GenerateTestInfo("Inputs");
		bodyContent += self.outputs.GenerateTestInfo("Outputs");
		bodyContent += self.passFailCriteria.GenerateTestInfo("Pass Fail Criteria");
		bodyContent += self.environmentalNeeds.GenerateTestInfo("Environmental Needs");
		bodyContent += self.specialConstraints.GenerateTestInfo("Special Constraints");
		bodyContent += self.interfaceDependencies.GenerateTestInfo("Interface Dependencies");
		bodyContent += self.GenerateValidatingItems("Validating Items");
	};
}

helper svs::VSVSTestInfo::GenerateTestInfo(in infoName : String) : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
		if(self.body <> null) {
		bodyContent += object DParagraph {
			paragraphContent += object DRun {
				bold := DRunAttributes::TRUE;
				text := object DText {
					content := infoName;
				};
			};
		};
		bodyContent += self.body.bodyContent.map GenerateBodyContent();
	};
	return bodyContent;
}

helper svs::VSVSTestCase::GenerateValidatingItems(in infoName : String) : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
	bodyContent += object DParagraph {
		paragraphContent += object DRun {
			bold := DRunAttributes::TRUE;
			text := object DText {
				content := infoName;
			};
		};
	};
	bodyContent += object DParagraph {
		paragraphContent += object DRun {
			text := object DText {
				var i : Integer := 1;
				while(i <= self.validatingItem->size()) {
					if(content = null) {
						content := self.validatingItem->at(i).name.toString();
					} else {
						content := content + ", " + self.validatingItem->at(i).name.toString();
					};
					i := i + 1;
				};
			};
		};
	};
	return bodyContent;
}

mapping svs::VSVSTestProcedures::GenerateTestProceduresSection() : doc::DDSection {
	result.name := "Test Procedures";
	
	result.sectionContent += self.general.map GenerateFixedSection("General");
	result.sectionContent += self.testProcedures.map GenerateTestProcedure();
}

mapping svs::VSVSTestProcedure::GenerateTestProcedure() : doc::DDSection {
	result.name := self.name;
	result.sectionContent := object DDBody {
		bodyContent += self.identifier.GenerateTestInfo("Identifier");
		bodyContent += self.purpose.GenerateTestInfo("Purpose");
		bodyContent += self.scenario.GenerateTestInfoScenario("Scenario");
		bodyContent += self.testScript.GenerateTestInfo("Test Script");
		bodyContent += self.GenerateProcedureTestCases("Test Cases");
	};
	result.sectionContent += self.procedureSteps.GenerateProcedureSteps("Procedure Steps");
};

helper svs::VSVSScenarioSection::GenerateTestInfoScenario(in infoName : String) : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
		if(self.body <> null) {
		bodyContent += object DParagraph {
			paragraphContent += object DRun {
				bold := DRunAttributes::TRUE;
				text := object DText {
					content := infoName;
				};
			};
		};
		bodyContent += object DParagraph {
			paragraphContent += object DRun {
				text := object DText {
					content := self.name;
				};
			};
		};
	};
	return bodyContent;
}

helper svs::VSVSTestProcedure::GenerateProcedureTestCases(in infoName : String) : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
	bodyContent += object DParagraph {
		paragraphContent += object DRun {
			bold := DRunAttributes::TRUE;
			text := object DText {
				content := infoName;
			};
		};
	};
	bodyContent += object DParagraph {
		paragraphContent += object DRun {
			text := object DText {
				var i : Integer := 1;
				while(i <= self.testCase->size()) {
					if(content = null) {
						content := self.testCase->at(i).name.toString();
					} else {
						content := content + ", " + self.testCase->at(i).name.toString();
					};
					i := i + 1;
				};
			};
		};
	};
	return bodyContent;
}

helper svs::VSVSProcedureSteps::GenerateProcedureSteps(in infoName : String) : doc::DDSection {
	return object DDSection {
		name := infoName;
		sectionContent := object DDBody {
			var i : Integer := 1;
			while(i <= self.step->size()) {
				bodyContent += self.step->at(i).GenerateProcedureStep();
				i := i + 1;
			};
		};
	};
}

helper svs::VSVSProcedureStep::GenerateProcedureStep() : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
	bodyContent += object DParagraph {
		indent := "1.25";
		paragraphContent += object DRun {
			text := object DText {
				bold := DRunAttributes::TRUE;
				content := "Step " + self.id + ": " + self.name.SanitizeTP();
			};
		};
	};
	if(self.description <> null) {
		bodyContent += object DParagraph {
			paragraphContent += object DRun {
				text := object DText {
					content := self.description.SanitizeTP();
				};
			};
		};
	};
	bodyContent += object DParagraph {
		indent := "2.5";
		paragraphContent += object DRun {
			text := object DText {
				content := "Send ";
				var i : Integer := 1;
				while(i <= self.inputs.input->size()) {
				    if((self.inputs.input->size() <> 1) and (i = self.inputs.input->size())) {
			            content := content + " and ";
			        }
			        else if(i <> 1) {
			            content := content + ", ";
			        };
					content := content + self.inputs.input->at(i).name.SanitizeTP();
					i := i + 1;
				};
			};
		};
	};
	if(self.outputs.output->size() <> 0) {
		bodyContent += object DParagraph {
			indent := "2.5";
			paragraphContent += object DRun {
				text := object DText {
					content := "Receive ";
					var i : Integer := 1;
					while(i <= (self.outputs.output->size())) {
				        if((self.outputs.output->size() <> 1) and (i = self.outputs.output->size())) {
				            content := content + " and ";
				        }
			        	else if(i <> 1) {
				            content := content + ", ";
				        };
						content := content + self.outputs.output->at(i).name.SanitizeTP();
						i := i + 1;
					};
				};
			};
		};
	};
	return bodyContent;
}

helper String::SanitizeTP() : String {
	var substrings := self.replaceAll("tc", "TC").replaceAll("tm", "TM").replaceAll("hk", "HK").replaceAll("sid", "SID").replaceAll("ack", "ACK").replaceAll("asw", "ASW").firstToUpper().tokenize("_");
	var retString : String;
	var lastChar : Integer;
	var i : Integer := 1;
	while(i <= substrings->size()) {
		if(i = 1) {
			retString := substrings->at(1);
		} else {
			var firstChar := substrings->at(i).at(1).toInteger();
			if((firstChar.oclIsInvalid()) or (lastChar.oclIsInvalid())) {
				retString := retString + " " + substrings->at(i);
			} else {
				retString := retString + "." + substrings->at(i);
			};
		};
		lastChar := substrings->at(i).at(substrings->at(i).size()).toInteger();
		i := i + 1;
	};
	
	return retString;
}

mapping svs::VSVSDocument::GenerateAdditionalInformationSection() : doc::DDSection {
	result.name := "Additional Information";
	
	result.sectionContent += self.map GenerateTraceabilityMatricesSection();
}

mapping svs::VSVSFixedSection::GenerateFixedSection(in sectionName : String) : doc::DDSection {
	result.name := sectionName;
	result.sectionContent += self.body.map GenerateBody();
	
	var i : Integer := 1;
	while(i <= self.svsInstatiableSubsections->size()) {
	result.sectionContent += self.svsInstatiableSubsections->at(i).map GenerateInstatiableSubsection();
		i := i + 1;
	};
}

mapping svs::VSVSInstantiableSection::GenerateInstatiableSubsection() : doc::DDSection {
	result.name := self.name;
	result.sectionContent += self.body.map GenerateBody();
	
	var i : Integer := 1;
	while(i <= self.svsInstatiableSubsections->size()) {
	result.sectionContent += self.svsInstatiableSubsections->at(i).map GenerateInstatiableSubsection();
		i := i + 1;
	};
}

mapping svs::VSVSDocument::GenerateTraceabilityMatricesSection() : doc::DDSection {
	result.name := "Traceability Matrices";
	
	result.sectionContent += object DDSection {
		name := "Direct Traceability Matrix";
		sectionContent += self.GenerateDirectTraceabilityMatrix();
	};
	
	result.sectionContent += object DDSection {
		name := "Inverse Traceability Matrix";
		sectionContent += self.GenerateInverseTraceabilityMatrix();
	};
}

helper svs::VSVSDocument::GenerateDirectTraceabilityMatrix() : doc::DDBody {
	return object DDBody {
		bodyContent += object DBasicTable {
			style := "TableGridFirstRowShadow";
			width := "100";
			
			rows += object DRow {
				cells += object DCell {
					width := "59";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SVS Test Case";
							};
						};
					};
				};
				cells += object DCell {
					width := "26";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SRS document";
							};
						};
					};
				};
				cells += object DCell {
					width := "15";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SRS Item";
							};
						};
					};
				};
			};
			var i : Integer := 1;
			while(i <= self.groups->size()) {
				var j : Integer := 1;
				while(j <= self.groups->at(i).items->size()) {
					rows += object DRow {
						cells += object DCell {
							if(self.groups->at(i).items->at(j).validatingItem->size() > 1) {
								rowSpan := self.groups->at(i).items->at(j).validatingItem->size().toString();
							};
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).name;
									};
								};
							};
						};
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).validatingItem->at(1).group.doc.id;
									};
								};
							};
						};
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).validatingItem->at(1).name;
									};
								};
							};
						};
					};
					if(self.groups->at(i).items->at(j).validatingItem->size() > 1) {
						var k : Integer := 2;
						while(k <= self.groups->at(i).items->at(j).validatingItem->size()) {
							rows += object DRow {
								cells += object DCell {
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := self.groups->at(i).items->at(j).validatingItem->at(k).group.doc.id;
											};
										};
									};
								};
								cells += object DCell {
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := self.groups->at(i).items->at(j).validatingItem->at(k).name;
											};
										};
									};
								};
							};
							k := k + 1;
						};
					};
					j := j + 1;
				};
				i := i + 1;
			};
		};
	};
}