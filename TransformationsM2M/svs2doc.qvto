import inverseMatrixVDM;
import docptl2doc;

modeltype doc uses "http://srg.aut.uah.es/micobs/doc/doc";
modeltype doctpl uses "http://srg.aut.uah.es/micobs/doctpl/doctpl";
modeltype svs uses "http://srg.aut.uah.es/micobs/svm/svs";
modeltype testsetup uses "http://srg.aut.uah.es/micobs/svm/testsetup";
modeltype vdm uses "http://srg.aut.uah.es/micobs/svm/vdm";
modeltype fieldvalue uses "http://srg.aut.uah.es/tmtcif/fieldvalue";

transformation generateDoc(in input : svs, out output : doc);

main() {
	input.objects()![svs::VSVSDocument]->map GenerateDoc();
}

mapping svs::VSVSDocument::GenerateDoc() : doc::DDocument {
	result.name := self.name;
	result.id := self.id;
	result.issue := self.issue;
	result.revision := self.revision;
	result.date := self.date;
	
	result.section += self.introductionSection.map GenerateIntroductionSection();
	result.section += self.applicableDocumentsSection.map GenerateApplicableDocumentsSection();
	result.section += self.referenceDocumentsSection.map GenerateReferenceDocumentsSection();
	result.section += self.termsDefinitionsAbbreviationsSection.map GenerateTDASection();
	result.section += self.softwareOverviewSection.map GenerateFixedSection("Software Overview");
	result.section += self.taskIdentificationSection.map GenerateTaskIdentificationSection();
	result.section += self.testingSpecificationDesignSection.map GenerateTestingSpecificationDesignSection();
	result.section += self.testCasesSection.map GenerateTestCasesSection();
	result.section += self.testProceduresSection.map GenerateTestProceduresSection();
	result.section += self.analysisInspectionReviewSection.map GenerateFixedSection("Analysis, Inspection and Review");
	result.section += self.testPlatformRequirementsSection.map GenerateFixedSection("Test Platform Requirements");
	result.section += self.map GenerateAdditionalInformationSection();
	result.section += self.tbcsTbdsSection.map GenerateTbcsTbdsSection();
}

mapping svs::VSVSTBCsTBDs::GenerateTbcsTbdsSection() : doc::DDSection {
	result.name := "Annex: TBCs/TBDs";
	
	if(self.tbcs->isEmpty() = false) {
		result.sectionContent += object DDBody {
			bodyContent += object DParagraph {
				paragraphContent += object DRun {
					bold := DRunAttributes::TRUE;
					text := object DText {
						content := "TBCs";
					}
				}
			}
		};
		result.sectionContent += self.tbcs.map GenerateTBCs();
	};
	if(self.tbds->isEmpty() = false) {
		result.sectionContent += object DDBody {
			bodyContent += object DParagraph {
				paragraphContent += object DRun {
					bold := DRunAttributes::TRUE;
					text := object DText {
						content := "TBDs";
					}
				}
			}
		};
		result.sectionContent += self.tbds.map GenerateTBDs();
	}
}

mapping svs::VSVSIntroduction::GenerateIntroductionSection() : doc::DDSection {
	result.name := "Introduction";
	
	result.sectionContent += self.svsInstatiableSubsections.map GenerateInstatiableSubsection();
}

mapping svs::VSVSApplicableDocuments::GenerateApplicableDocumentsSection() : doc::DDSection {
	result.name := "Applicable Documents";
	
	result.sectionContent := self.applicableDocuments.map GenerateADRDs();
}

mapping svs::VSVSReferenceDocuments::GenerateReferenceDocumentsSection() : doc::DDSection {
	result.name := "Reference Documents";
	
	result.sectionContent := self.referenceDocuments.map GenerateADRDs();
}

mapping svs::VSVSTermsDefinitionsAbbreviations::GenerateTDASection() : doc::DDSection {
	result.name := "Terms, Definitions and Abbreviations";
	
	result.sectionContent := object DDBody {
		var i : Integer := 1;
		while(i <= self.terms->size()) {
			bodyContent += self.terms->at(i).GenerateTDA();
			i := i + 1;
		};
		
		i := 1;
		while(i <= self.definitions->size()) {
			bodyContent += self.definitions->at(i).GenerateTDA();
			i := i + 1;
		};
		
		i := 1;
		while(i <= self.abbreviations->size()) {
			bodyContent += self.abbreviations->at(i).GenerateTDA();
			i := i + 1;
		}
	}
}

helper svs::VSVSAbstractBriefDescription::GenerateTDA() : doctpl::DParagraph {
	return object DParagraph {
		style := "TDA";
		paragraphContent += object DRun {
			text := object DText {
				content := self.name;
			}
		};
		var description := self.description.map GenerateRun();
		description.tab := object DTab {};
		paragraphContent += description;
	}
}

mapping svs::VSVSFixedSection::GenerateFixedSection(in sectionName : String) : doc::DDSection {
	result.name := sectionName;
	result.sectionContent += self.body.map GenerateBody();
	
	var i : Integer := 1;
	while(i <= self.svsInstatiableSubsections->size()) {
		result.sectionContent += self.svsInstatiableSubsections->at(i).map GenerateInstatiableSubsection();
		i := i + 1;
	}
}

mapping svs::VSVSInstantiableSection::GenerateInstatiableSubsection() : doc::DDSection {
	result.name := self.name;
	result.sectionContent += self.body.map GenerateBody();
	
	var i : Integer := 1;
	while(i <= self.svsInstatiableSubsections->size()) {
		result.sectionContent += self.svsInstatiableSubsections->at(i).map GenerateInstatiableSubsection();
		i := i + 1;
	}
}

mapping svs::VSVSDocument::GenerateAdditionalInformationSection() : doc::DDSection {
	result.name := "Additional Information";
	
	result.sectionContent += self.map GenerateTraceabilityMatricesSection();
}

mapping svs::VSVSTaskIdentification::GenerateTaskIdentificationSection() : doc::DDSection {
	result.name := "Task Identification";
	result.sectionContent += self.taskCriteria.map GenerateFixedSection("Task Criteria");
	result.sectionContent += self.featuresToBeTested.map GenerateFixedSection("Features to be Tested");
	result.sectionContent += self.featuresNotToBeTested.map GenerateFixedSection("Features not to be Tested");
	result.sectionContent += self.testPassFailCriteria.map GenerateFixedSection("Test Pass Fail Criteria");
	result.sectionContent += self.itemsCanNotBeValidated.map GenerateFixedSection("Items that can not be Validated");
	result.sectionContent += self.manuallyAutoGeneratedCode.map GenerateFixedSection("Manually Automatic Generated Code");
}

mapping svs::VSVSTestingSpecificationDesign::GenerateTestingSpecificationDesignSection() : doc::DDSection {
	result.name := "Testing Specification Design";
	var generalSection := self.general.map GenerateFixedSection("General");
	generalSection.sectionContent += self.testSetup.map GenerateTestSetupRef();
	result.sectionContent += generalSection;
	result.sectionContent += self.testDesigns.map GenerateTestDesign();
}

mapping testsetup::VTestSetupDocument::GenerateTestSetupRef() : doc::DDSection {
	result.name := "Test setup document";
	result.sectionContent := object DDBody {
		bodyContent := object DParagraph {
			paragraphContent += object DRun {
				italics := DRunAttributes::TRUE;
				text := object DText {
					content := self.name;
				}
			};
			paragraphContent += object DRun {
				text := object DText {
					content := ". " + self.id;
					if(self.issue <> null)
						content := content + " issue " + self.issue.toString();
					if(self.revision <> null)
						content := content + " rev " + self.revision.toString();
					if(self.date <> null)
						content := content + ". " + self.date;
				}
			}
		}
	}
}

mapping svs::VSVSTestDesign::GenerateTestDesign() : doc::DDSection {
	result.name := self.name;
	result.sectionContent += self.general.map GenerateFixedSection("General");
	result.sectionContent += self.featuresToBeTested.map GenerateFixedSection("Features to be Tested");
	result.sectionContent += self.approachRefinements.map GenerateFixedSection("Approach Refinements");
}

mapping svs::VSVSTestCases::GenerateTestCasesSection() : doc::DDSection {
	result.name := "Test Cases";
	result.sectionContent += self.general.map GenerateFixedSection("General");
	result.sectionContent += self.testCases.map GenerateTestCase();
}

mapping svs::VSVSTestCase::GenerateTestCase() : doc::DDSection {
	result.name := self.name;
	result.sectionContent := object DDBody {
		bodyContent += self.identifier.GenerateTestInfo("Identifier");
		bodyContent += self.inputs.GenerateTestInfo("Inputs");
		bodyContent += self.outputs.GenerateTestInfo("Outputs");
		bodyContent += self.passFailCriteria.GenerateTestInfo("Pass Fail Criteria");
		bodyContent += self.environmentalNeeds.GenerateTestInfo("Environmental Needs");
		bodyContent += self.specialConstraints.GenerateTestInfo("Special Constraints");
		bodyContent += self.interfaceDependencies.GenerateTestInfo("Interface Dependencies");
		bodyContent += self.GenerateValidatingItems("Validating Items");
	}
}

helper svs::VSVSTestInfo::GenerateTestInfo(in infoName : String) : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
		if(self.body <> null) {
		bodyContent += object DParagraph {
			paragraphContent += object DRun {
				bold := DRunAttributes::TRUE;
				text := object DText {
					content := infoName;
				}
			}
		};
		bodyContent += self.body.bodyContent.map GenerateBodyContent();
	};
	return bodyContent;
}

helper svs::VSVSTestCase::GenerateValidatingItems(in infoName : String) : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
	bodyContent += object DParagraph {
		paragraphContent += object DRun {
			bold := DRunAttributes::TRUE;
			text := object DText {
				content := infoName;
			}
		}
	};
	bodyContent += object DParagraph {
		paragraphContent += object DRun {
			text := object DText {
				var i : Integer := 1;
				while(i <= self.validatingItem->size()) {
					if(content = null) {
						content := self.validatingItem->at(i).name;
					} else {
					    if((self.validatingItem->size() <> 1) and (i = self.validatingItem->size())) {
				            content := content + " and ";
				        } else if(i <> 1) {
				            content := content + ", ";
				        };
						content := content + self.validatingItem->at(i).name;
					};
					i := i + 1;
				}
			}
		}
	};
	return bodyContent;
}
						
mapping svs::VSVSTestProcedures::GenerateTestProceduresSection() : doc::DDSection {
	result.name := "Test Procedures";
	
	result.sectionContent += self.general.map GenerateFixedSection("General");
	result.sectionContent += self.testProcedures.map GenerateTestProcedure();
}

mapping svs::VSVSTestProcedure::GenerateTestProcedure() : doc::DDSection {
	result.name := self.name;
	result.sectionContent := object DDBody {
		bodyContent += self.identifier.GenerateTestInfo("Identifier");
		bodyContent += self.purpose.GenerateTestInfo("Purpose");
		bodyContent += self.scenario.GenerateTestInfoScenario("Scenario");
		bodyContent += self.testScript.GenerateTestInfo("Test Script");
		bodyContent += self.GenerateProcedureTestCases("Test Cases");
	};
	result.sectionContent += self.procedureSteps.GenerateProcedureSteps("Procedure Steps");
};

helper testsetup::VTestSetupScenarioSection::GenerateTestInfoScenario(in infoName : String) : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
		if(self.body <> null) {
		bodyContent += object DParagraph {
			paragraphContent += object DRun {
				bold := DRunAttributes::TRUE;
				text := object DText {
					content := infoName;
				}
			}
		};
		bodyContent += object DParagraph {
			paragraphContent += object DRun {
				text := object DText {
					content := self.name;
				}
			}
		}
	};
	return bodyContent;
}

helper svs::VSVSTestProcedure::GenerateProcedureTestCases(in infoName : String) : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
	bodyContent += object DParagraph {
		paragraphContent += object DRun {
			bold := DRunAttributes::TRUE;
			text := object DText {
				content := infoName;
			}
		}
	};
	bodyContent += object DParagraph {
		paragraphContent += object DRun {
			text := object DText {
				var i : Integer := 1;
				while(i <= self.testCase->size()) {
					if(content = null) {
						content := self.testCase->at(i).name;
					} else {
						content := content + ", " + self.testCase->at(i).name;
					};
					i := i + 1;
				}
			}
		}
	};
	return bodyContent;
}

helper svs::VSVSProcedureSteps::GenerateProcedureSteps(in infoName : String) : doc::DDSection {
	return object DDSection {
		name := infoName;
		
		if(self.priorActionOverVariable->size() != 0) {
			sectionContent += object DDBody {
				bodyContent += object DParagraph {
					indent := "1.25";
					paragraphContent += object DRun {
						text := object DText {
							bold := DRunAttributes::TRUE;
							content := "Previous action: ";
						}
					};
					paragraphContent += object DRun {
						text := object DText {
							content := self.priorActionOverVariable.name;
						}
					}
				}
			}
		};
		
		sectionContent += object DDBody {
			var i : Integer := 1;
			while(i <= self.step->size()) {
				bodyContent += self.step->at(i).GenerateProcedureStep(i-1);
				i := i + 1;
			}
		}
	}
}

helper svs::VSVSProcedureStep::GenerateProcedureStep(in id : Integer) : OrderedSet(doctpl::DBodyContent) {
	var bodyContent := object OrderedSet(doctpl::DBodyContent) {};
	bodyContent += object DParagraph {
		indent := "1.25";
		paragraphContent += object DRun {
			text := object DText {
				bold := DRunAttributes::TRUE;
				content := "Step " + id.toString() + ": " + self.name;
			}
		}
	};
	if(self.configurations != null) {
		bodyContent += object DParagraph {
			indent := "1.25";
				paragraphContent += object DRun {
				text := object DText {
					content := "Packet configurations ";
				}
			}
		};
		bodyContent += object DItemize {
			indent := "2.5";
			items := object OrderedSet(doctpl::DListItem) {};
			var i : Integer := 1;
			while(i <= self.configurations._configuration->size()) {
				items += object DListItem {
					paragraph := object DParagraph {
						paragraphContent += object DRun {
							text := object DText {
								content := self.configurations._configuration->at(i).selectedConfiguration.name;
							}
						};
						if(self.configurations._configuration->at(i).filterStatus != VTestSetupConfigurationStatus::not_set) {
							paragraphContent += object DRun {
								text := object DText {
									content := ". Filter Status: ";
								};
							};
							paragraphContent += object DRun {
								text := object DText {
									italics := DRunAttributes::TRUE;
									content := self.configurations._configuration->at(i).filterStatus.toString();
								}
							};
						};
						if(self.configurations._configuration->at(i).printStatus != VTestSetupConfigurationStatus::not_set) {
							paragraphContent += object DRun {
								text := object DText {
									content := ". Print Status: ";
								}
							};
							paragraphContent += object DRun {
								text := object DText {
									italics := DRunAttributes::TRUE;
									content := self.configurations._configuration->at(i).printStatus.toString();
								}
							}
						}
					}
				};
				i := i + 1;
			}
		}
	};
	if(self.inputs.metaClassName() = "VSVSStepTelecommandSequence") {
		var tcSeq = self.inputs.oclAsType(VSVSStepTelecommandSequence);
		bodyContent += object DParagraph {
			indent := "1.25";
				paragraphContent += object DRun {
				text := object DText {
					content := "Send ";
				}
			}
		};
		bodyContent += object DItemize {
			indent := "2.5";
			items := object OrderedSet(doctpl::DListItem) {};
			var i : Integer := 1;
			while(i <= tcSeq.telecommand->size()) {
				items += object DListItem {
					paragraph := object DParagraph {
						paragraphContent += object DRun {
							text := object DText {
								content := "TC(" + tcSeq.telecommand->at(i).tcData.tcTemplate.tc.type + "."
										+ tcSeq.telecommand->at(i).tcData.tcTemplate.tc.subtype + ") " +
										tcSeq.telecommand->at(i).name +
										" via " + tcSeq.telecommand->at(i).interface.name;
								if(tcSeq.telecommand->at(i).delay_value != null) {
									content := content + " after " + tcSeq.telecommand->at(i).delay_value +
											" " + tcSeq.telecommand->at(i).delay_unit.toString();
								}
							}
						}
					};
					if((tcSeq.telecommand->at(i).tcData.tcTemplate.fields->size() != 0) or 
							(tcSeq.telecommand->at(i).tcData.fields->size() != 0) or
							(tcSeq.telecommand->at(i).tcHeader.fields->size() != 0)) {
						sublist := object DItemize {
							indent := "3.75";
							items := object OrderedSet(doctpl::DListItem) {};
							var j : Integer := 1;
							while(j <= tcSeq.telecommand->at(i).tcData.tcTemplate.fields->size()) {
								var field := tcSeq.telecommand->at(i).tcData.tcTemplate.fields->at(j);
								items += object DListItem {
									paragraph := object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := field.fieldRef.name + ": " + field.value.GetFieldValue();
											}
										}
									}
								};
								j := j + 1;
							};
							j := 1;
							while(j <= tcSeq.telecommand->at(i).tcData.fields->size()) {
								var field := tcSeq.telecommand->at(i).tcData.fields->at(j);
								items += object DListItem {
									paragraph := object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := field.fieldRef.name + ": " + field.value.GetFieldValue();
											}
										}
									}
								};
								j := j + 1;
							};
							if(tcSeq.telecommand->at(i).tcHeader.fields->size() != 0) {
								items += object DListItem {
									paragraph := object DParagraph {
										paragraphContent += object DRun {
											italics := DRunAttributes::TRUE;
											text := object DText {
												content := "Header modifications: ";
											}
										}
									};
									sublist := object DItemize {
										indent := "5.0";
										items := object OrderedSet(doctpl::DListItem) {};
										j := 1;
										while(j <= tcSeq.telecommand->at(i).tcHeader.fields->size()) {
											var headerField := tcSeq.telecommand->at(i).tcHeader.fields->at(j);
											items += object DListItem {
												paragraph := object DParagraph {
													paragraphContent += object DRun {
														text := object DText {
															content := headerField.fieldRef.name + ": " + headerField.value.GetFieldValue();
														}
													}
												}
											};
											j := j + 1;
										}
									}
								}
							}
						}
					}
				};
				i := i + 1;
			}
		}
	} else if(self.inputs.metaClassName() = "VSVSStepAction") {
		var action = self.inputs.oclAsType(VSVSStepAction);
		bodyContent += object DParagraph {
			indent := "1.25";
			paragraphContent += object DRun {
				text := object DText {
					content := "Action: ";
					if((action.selectedAction.type = VTestSetupActionType::checking) or 
						(action.selectedAction.type = VTestSetupActionType::tmtc_checking)) {
						content := content + "Check ";
					} else {
						content := content + "Perform ";
					};
					content := content + action.selectedAction.name;
					if(action.delay_value != null) {
						content := content + " after " + action.delay_value +
								" " + action.delay_unit.toString();
					};
					if(action.span_value != null) {
						content := content + " for " + action.span_value +
								" " + action.span_unit.toString();
					}
				}
			}
		}
	};
	if(self.outputs != null) {
		if(self.outputs.metaClassName() = "VSVSStepTelemetrySet") {
			var tmSet = self.outputs.oclAsType(VSVSStepTelemetrySet);
			bodyContent += object DParagraph {
				indent := "1.25";
				paragraphContent += object DRun {
					text := object DText {
						content := "Receive " + tmSet.checkmode.toString() +
									" within " + tmSet.valid_time_interval_value + " " +
									tmSet.valid_time_interval_unit.toString() + " ";
					}
				}
			};
			bodyContent += object DItemize {
				indent := "2.5";
				items := object OrderedSet(doctpl::DListItem) {};
				var i : Integer := 1;
				while(i <= tmSet.telemetry->size()) {
					items += object DListItem {
						paragraph := object DParagraph {
							paragraphContent += object DRun {
								text := object DText {
								content := "TM(" + tmSet.telemetry->at(i).tmData.tmTemplate.tm.type + "."
										+ tmSet.telemetry->at(i).tmData.tmTemplate.tm.subtype + ") " +
										tmSet.telemetry->at(i).name +
										" via " + tmSet.telemetry->at(i).interface.name;
								}
							}
						};
						if((tmSet.telemetry->at(i).tmData.tmTemplate.tm.pi1 != null) or
							(tmSet.telemetry->at(i).tmData.tmTemplate.fields->size() != 0) or 
								(tmSet.telemetry->at(i).tmData.fields->size() != 0) or
								(tmSet.telemetry->at(i).tmHeader.fields->size() != 0)) {
							sublist := object DItemize {
								indent := "3.75";
								items := object OrderedSet(doctpl::DListItem) {};
								var j : Integer := 1;
								if(tmSet.telemetry->at(i).tmData.tmTemplate.tm.pi1 != null) {
									items += object DListItem {
										paragraph := object DParagraph {
											paragraphContent += object DRun {
												text := object DText {
													content := tmSet.telemetry->at(i).tmData.tmTemplate.tm.pi1.name + ": " +
															tmSet.telemetry->at(i).tmData.tmTemplate.tm.pi1.val;
												}
											}
										}
									}
								};
								while(j <= tmSet.telemetry->at(i).tmData.tmTemplate.fields->size()) {
									var field := tmSet.telemetry->at(i).tmData.tmTemplate.fields->at(j);
									items += object DListItem {
										paragraph := object DParagraph {
											paragraphContent += object DRun {
												text := object DText {
													content := field.fieldRef.name + ": " + field.value.GetFieldValue();
												}
											}
										}
									};
									j := j + 1;
								};
								j := 1;
								while(j <= tmSet.telemetry->at(i).tmData.fields->size()) {
									var field := tmSet.telemetry->at(i).tmData.fields->at(j);
									items += object DListItem {
										paragraph := object DParagraph {
											paragraphContent += object DRun {
												text := object DText {
													content := field.fieldRef.name + ": " + field.value.GetFieldValue();
												}
											}
										}
									};
									j := j + 1;
								};
								if(tmSet.telemetry->at(i).tmHeader.fields->size() != 0) {
									items += object DListItem {
										paragraph := object DParagraph {
											paragraphContent += object DRun {
												italics := DRunAttributes::TRUE;
												text := object DText {
													content := "Header filters: ";
												}
											}
										};
										sublist := object DItemize {
											indent := "5.0";
											items := object OrderedSet(doctpl::DListItem) {};
											j := 1;
											while(j <= tmSet.telemetry->at(i).tmHeader.fields->size()) {
												var headerField := tmSet.telemetry->at(i).tmHeader.fields->at(j);
												items += object DListItem {
													paragraph := object DParagraph {
														paragraphContent += object DRun {
															text := object DText {
																content := headerField.fieldRef.name + ": " + headerField.value.GetFieldValue();
															}
														}
													}
												};
												j := j + 1;
											}
										}
									}
								}
							}
						}
					};
					i := i + 1;
				}
			}
		}
	};
	return bodyContent;
}

helper TMTCIFFieldValue::GetFieldValue() : String {
	var textContent : String := null;
	if(self.metaClassName() = "TMTCIFFieldValueRaw") {
		textContent := self.oclAsType(TMTCIFFieldValueRaw).value;
	} else if(self.metaClassName() = "TMTCIFFieldValueFile") {
		textContent := self.oclAsType(TMTCIFFieldValueFile).filename;
	} else if(self.metaClassName() = "TMTCIFFieldValueEnum") {
		textContent := self.oclAsType(TMTCIFFieldValueEnum).valueRef.name + " (" +
			self.oclAsType(TMTCIFFieldValueEnum).valueRef.raw + ")";
	};
	return textContent;
}

mapping svs::VSVSDocument::GenerateTraceabilityMatricesSection() : doc::DDSection {
	result.name := "Traceability Matrices";
	
	result.sectionContent += object DDSection {
		name := "Direct Traceability Matrix";
		sectionContent += self.GenerateDirectTraceabilityMatrix();
	};
	
	result.sectionContent += object DDSection {
		name := "Inverse Traceability Matrix";
		sectionContent += self.GenerateInverseTraceabilityMatrix();
	}
}

helper svs::VSVSDocument::GenerateDirectTraceabilityMatrix() : doc::DDBody {
	return object DDBody {
		bodyContent += object DBasicTable {
			style := "TableGridFirstRowShadow";
			width := "100";
			
			rows += object DRow {
				cells += object DCell {
					width := "59";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SVS Test Case";
							}
						}
					}
				};
				cells += object DCell {
					width := "26";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SRS document";
							}
						}
					}
				};
				cells += object DCell {
					width := "15";
					bodyContent += object DParagraph {
						paragraphContent += object DRun {
							bold := DRunAttributes::TRUE;
							text := object DText {
								content := "SRS Item";
							}
						}
					}
				}
			};
			var i : Integer := 1;
			while(i <= self.groups->size()) {
				var j : Integer := 1;
				while(j <= self.groups->at(i).items->size()) {
					rows += object DRow {
						cells += object DCell {
							if(self.groups->at(i).items->at(j).validatingItem->size() > 1) {
								rowSpan := self.groups->at(i).items->at(j).validatingItem->size().toString();
							};
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).name;
									}
								}
							}
						};
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).validatingItem->at(1).group.doc.id;
									}
								}
							}
						};
						cells += object DCell {
							bodyContent += object DParagraph {
								paragraphContent += object DRun {
									text := object DText {
										content := self.groups->at(i).items->at(j).validatingItem->at(1).name;
									}
								}
							}
						}
					};
					if(self.groups->at(i).items->at(j).validatingItem->size() > 1) {
						var k : Integer := 2;
						while(k <= self.groups->at(i).items->at(j).validatingItem->size()) {
							rows += object DRow {
								cells += object DCell {
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := self.groups->at(i).items->at(j).validatingItem->at(k).group.doc.id;
											}
										}
									}
								};
								cells += object DCell {
									bodyContent += object DParagraph {
										paragraphContent += object DRun {
											text := object DText {
												content := self.groups->at(i).items->at(j).validatingItem->at(k).name;
											}
										}
									}
								}
							};
							k := k + 1;
						}
					};
					j := j + 1;
				};
				i := i + 1;
			}
		}
	}
}