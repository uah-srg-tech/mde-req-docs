library docptl2doc;

modeltype doc uses "http://srg.aut.uah.es/micobs/doc/doc";
modeltype doctpl uses "http://srg.aut.uah.es/micobs/doctpl/doctpl";

mapping doctpl::DAbstractRelatedDocument::GenerateADRDs() : doc::DDBody {
	init {
		result := object DDBody {
			bodyContent += self.map GenerateADRD();
		};
	}
}

mapping doctpl::DAbstractRelatedDocument::GenerateADRD() : doctpl::DBodyContent {
	init {
		result := object DParagraph {
			name := self.name;
			style := "ADRD";
			paragraphContent += object DRun {
				text := object DText {
					content := self.name;
				};
			};
			paragraphContent += object DRun {
				tab := object DTab {};
				text := object DText {
					content := self.title + ". " + self.id;
					if(self.issue <> null)
						content := content + " issue " + self.issue.toString();
					if(self.revision <> null)
						content := content + " rev " + self.revision.toString();
					if(self.date <> null)
						content := content + ". " + self.date;
				};
			};
		};
	}
}

mapping doctpl::DBody::GenerateBody() : doc::DDBody {
	result.bodyContent += self.bodyContent->map GenerateBodyContent();
}

mapping doctpl::DBodyContent::GenerateBodyContent() : doctpl::DBodyContent {
	init {
		if(self.metaClassName() = "DParagraph") {
			result := self.oclAsType(DParagraph).map GenerateParagraph();
		}
		else if(self.metaClassName() = "DFigureFromFile") {
			result := self.oclAsType(DFigureFromFile).map GenerateFigureFromFile();
		}
		else if(self.metaClassName() = "DTableFromFile") {
			result := self.oclAsType(DTableFromFile).map GenerateTableFromFile();
		}
		else if(self.metaClassName() = "DBasicTable") {
			result := self.oclAsType(DBasicTable).map GenerateBasicTable();
		}
		else if(self.metaClassName() = "DEnumerate") {
			result := self.oclAsType(DEnumerate).GenerateEnumerate();
		}
		else if(self.metaClassName() = "DItemize") {
			result := self.oclAsType(DItemize).GenerateItemize();
		};
	}
	if(self.style <> null) {
		result.style := self.style;
	};
	if(self.alignment <> doctpl::DAlignment::left) {
		result.alignment := self.alignment;
	};
}

mapping doctpl::DParagraph::GenerateParagraph() : doctpl::DParagraph {
	if(self.name <> null) {
		result.name := self.name;	
	};
	var i : Integer := 1;
	while(i <= self.paragraphContent->size()) {
		if(self.paragraphContent->at(i).metaClassName() = "DRun") {
			result.paragraphContent += self.paragraphContent->at(i).oclAsType(DRun).map GenerateRun();
		}
		else if(self.paragraphContent->at(i).metaClassName() = "DHyperlink") {
			result.paragraphContent += self.paragraphContent->at(i).oclAsType(DHyperlink).map GenerateHyperlink();
		};
		i := i + 1;
	};
}

mapping doctpl::DRun::GenerateRun() : doctpl::DRun {
	result.bold := self.bold;
	result.italics := self.italics;
	result.underline := self.underline;
	if(self.tab <> null) {
		result.tab := object DTab {};
	};
	result.text := object DText {
		content := self.text.content.substring(7, self.text.content.size()-7);
	};
}

mapping doctpl::DHyperlink::GenerateHyperlink() : doctpl::DHyperlink {
	result.reference := self.reference.late resolveone(DReferenceableObject);
	if(self.run = null) {
		result.run := object DRun {
			text := object DText {
				content := self.reference.name;
			};
		};
	} else {
		result.run := self.run.map GenerateRun();
	};
	result.run.italics := DRunAttributes::TRUE;
}

mapping doctpl::DFigureFromFile::GenerateFigureFromFile() : doctpl::DFigureFromFile {
	result.name := self.name;
	result.referenceFile := self.referenceFile;
	result.width := self.width;
	result.height := self.height;
	result.caption := self.caption;
}

mapping doctpl::DTableFromFile::GenerateTableFromFile() : doctpl::DTableFromFile {
	result.name := self.name;
	result.referenceFile := self.referenceFile;
	result.width := self.width;
	result.height := self.height;
	result.caption := self.caption;
}

mapping doctpl::DBasicTable::GenerateBasicTable() : doctpl::DBasicTable { 
	result.name := self.name;
	result.width := self.width;
	result.caption := self.caption;
	result.rows += self.rows.map GenerateRows();
}

mapping doctpl::DRow::GenerateRows() : doctpl::DRow {
	result.cells += self.cells.map GenerateCells();
}

mapping doctpl::DCell::GenerateCells() : doctpl::DCell {
	if(self.colSpan <> null)
		result.colSpan := self.colSpan;
	if(self.rowSpan <> null)
		result.rowSpan := self.rowSpan;
	if(self.width <> null)
		result.width := self.width;
	if(self.shadow <> null)
		result.shadow := self.shadow;
	
	var i : Integer := 1;
	while(i <= self.bodyContent->size()) {
		result.bodyContent += self.bodyContent.map GenerateBodyContent();
		i := i + 1;
	};
}

helper doctpl::DListContent::GenerateEnumerate() : doctpl::DListContent {
	return object DEnumerate {
		if(self.name <> null) {
			name := self.name;	
		};
		if(self.style <> null) {
			style := self.style;
		};
		if(self.alignment <> doctpl::DAlignment::left) {
			alignment := self.alignment;
		};
		items += self.items.map GenerateItems();
	};
}

helper doctpl::DListContent::GenerateItemize() : doctpl::DListContent {
	return object DItemize {
		if(self.name <> null) {
			name := self.name;	
		};
		if(self.style <> null) {
			style := self.style;
		};
		if(self.alignment <> doctpl::DAlignment::left) {
			alignment := self.alignment;
		};
		items += self.items.map GenerateItems();
	};
}

mapping doctpl::DListItem::GenerateItems() : doctpl::DListItem {
	result.paragraph := self.paragraph.map GenerateParagraph();
	if(self.sublist.style <> null) {
		result.sublist.style := self.sublist.style;
	};
	if(self.sublist.alignment <> doctpl::DAlignment::left) {
		result.sublist.alignment := self.sublist.alignment;
	};
	result.sublist.items := self.sublist.items.map GenerateItems();
}

