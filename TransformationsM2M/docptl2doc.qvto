library docptl2doc;

modeltype doc uses "http://srg.aut.uah.es/micobs/doc/doc";
modeltype doctpl uses "http://srg.aut.uah.es/micobs/doctpl/doctpl";

helper doctpl::DAbstractRelatedDocument::GenerateADRDs() : doc::DDBody {
	return object DDBody {
		bodyContent := object DParagraph {
			style := "ADRD";
			paragraphContent += object DRun {
				text := object DText {
					content := self.name;
				};
			};
			paragraphContent += object DRun {
				tab := object DTab {};
				text := object DText {
					content := self.title + ". " + self.id;
					if(self.issue <> null)
						content := content + " issue " + self.issue.toString();
					if(self.revision <> null)
						content := content + " rev " + self.revision.toString();
					if(self.date <> null)
						content := content + ". " + self.date;
				};
			};
		};
	};	
}

helper doctpl::DBody::GenerateDBody() : doc::DDBody {
	return object DDBody {
		var i : Integer := 1;
		while(i <= self.bodyContent->size()) {
			bodyContent += self.bodyContent.map GenerateBodyContent();
			i := i + 1;
		};
	};
}

mapping doctpl::DBodyContent::GenerateBodyContent() : doctpl::DBodyContent {
	init {
		if(self.metaClassName() = "DParagraph") {
			result := self.oclAsType(DParagraph).GenerateParagraph();
		}
		else if(self.metaClassName() = "DFigureFromFile") {
			result := self.oclAsType(DFigureFromFile).GenerateFigureFromFile();
		}
		else if(self.metaClassName() = "DTableFromFile") {
			result := self.oclAsType(DTableFromFile).GenerateTableFromFile();
		}
		else if(self.metaClassName() = "DBasicTable") {
			result := self.oclAsType(DBasicTable).GenerateBasicTable();
		}
		else if(self.metaClassName() = "DEnumerate") {
			result := self.oclAsType(DEnumerate).GenerateEnumerate();
		}
		else if(self.metaClassName() = "DItemize") {
			result := self.oclAsType(DItemize).GenerateItemize();
		};
	}
	if(self.style <> null) {
		result.style := self.style;
	};
	if(self.alignment <> doctpl::DAlignment::left) {
		result.alignment := self.alignment;
	};
}

helper doctpl::DParagraph::GenerateParagraph() : doctpl::DParagraph {
	return object DParagraph {
		
		var i : Integer := 1;
		while(i <= self.paragraphContent->size()) {
			if(self.paragraphContent->at(i).metaClassName() = "DRun") {
				paragraphContent += self.paragraphContent->at(i).oclAsType(DRun).GenerateRun();
			}
			else if(self.paragraphContent->at(i).metaClassName() = "DHyperlink") {
				paragraphContent += self.paragraphContent->at(i).oclAsType(DHyperlink).GenerateHyperlink();
			};
			i := i + 1;
		};
	};
}

helper doctpl::DRun::GenerateRun() : doctpl::DRun {
	return object DRun {
		bold := self.bold;
		italics := self.italics;
		underline := self.underline;
		if(self.tab <> null) {
			tab := object DTab {};
		};
		text := object DText {
			content := self.text.content.substring(7, self.text.content.size()-7);
		};
	};
}

helper doctpl::DHyperlink::GenerateHyperlink() : doctpl::DHyperlink {
	return object DHyperlink {
		reference := self.reference;
		if(self.run = null) {
			run := object DRun {
				text := object DText {
					content := self.reference.name;
				};
			};
		} else {
			run := self.run.GenerateRun();
		};
	};
}

helper doctpl::DFigureFromFile::GenerateFigureFromFile() : doctpl::DFigureFromFile {
	return object DFigureFromFile {
		name := self.name;
		referenceFile := self.referenceFile;
		width := self.width;
		height := self.height;
		caption := self.caption;
	};
}

helper doctpl::DTableFromFile::GenerateTableFromFile() : doctpl::DTableFromFile {
	return object DTableFromFile {
		name := self.name;
		referenceFile := self.referenceFile;
		width := self.width;
		height := self.height;
		caption := self.caption;
	};
}

helper doctpl::DBasicTable::GenerateBasicTable() : doctpl::DBasicTable { 
	return object DBasicTable {
		name := self.name;
		width := self.width;
		caption := self.caption;
		rows += self.rows.GenerateRows();
	};
}

helper doctpl::DRow::GenerateRows() : doctpl::DRow {
	return object DRow {
		cells += self.cells.GenerateCells();
	};
}

helper doctpl::DCell::GenerateCells() : doctpl::DCell {
	return object DCell {
		if(self.colSpan <> null)
			colSpan := self.colSpan;
		if(self.rowSpan <> null)
			rowSpan := self.rowSpan;
		if(self.width <> null)
			width := self.width;
		if(self.shadow <> null)
			shadow := self.shadow;
		
		var i : Integer := 1;
		while(i <= self.bodyContent->size()) {
			bodyContent += self.bodyContent.map GenerateBodyContent();
			i := i + 1;
		};
	};
}

helper doctpl::DListContent::GenerateEnumerate() : doctpl::DListContent {
	return object DEnumerate {
		if(self.style <> null) {
			style := self.style;
		};
		if(self.alignment <> doctpl::DAlignment::left) {
			alignment := self.alignment;
		};
		items += self.items.GenerateItems();
	};
}

helper doctpl::DListContent::GenerateItemize() : doctpl::DListContent {
	return object DItemize {
		if(self.style <> null) {
			style := self.style;
		};
		if(self.alignment <> doctpl::DAlignment::left) {
			alignment := self.alignment;
		};
		items += self.items.GenerateItems();
	};
}

helper doctpl::DListItem::GenerateItems() : doctpl::DListItem {
	return object DListItem {
		paragraph := self.paragraph.GenerateParagraph();
		if(self.sublist.style <> null) {
			sublist.style := self.sublist.style;
		};
		if(self.sublist.alignment <> doctpl::DAlignment::left) {
			sublist.alignment := self.sublist.alignment;
		};
		sublist.items := self.sublist.items.GenerateItems();
	};
}

